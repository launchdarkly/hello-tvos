// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import DarklyEventSource;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LaunchDarkly",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif








@interface NSJSONSerialization (SWIFT_EXTENSION(LaunchDarkly))
/// String domain set into NSError objects for Objective-C clients when the SDK sends a JSONError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LaunchDarklyJSONErrorDomain;)
+ (NSString * _Nonnull)LaunchDarklyJSONErrorDomain SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, LaunchDarklyJSONError, "JSONError", closed) {
/// Error used when the expected JSON object is a dictionary, but the actual object is not
  LaunchDarklyJSONErrorNotADictionary = 0,
/// Error used when the expected object is a valid JSON object, but the actual object is not
  LaunchDarklyJSONErrorInvalidJsonObject = 1,
};
static NSString * _Nonnull const LaunchDarklyJSONErrorDomain = @"LaunchDarkly.JSONError";






/// Class providing ObjC interoperability with the LDUser struct
SWIFT_CLASS("_TtC12LaunchDarkly13LDUserWrapper")
@interface LDUserWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSCoder;

@interface LDUserWrapper (SWIFT_EXTENSION(LaunchDarkly)) <NSCoding>
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;
@end




/// Collects the elements of a feature flag that changed as a result of a <code>clientstream</code> update or feature flag request. The SDK will pass a typed ObjcLDChangedFlag or a collection of ObjcLDChangedFlags into feature flag observer blocks. This is the base type for the typed ObjcLDChangedFlags passed into observer blocks. The client app will have to convert the ObjcLDChangedFlag into the expected typed ObjcLDChangedFlag type.
/// See the typed <code>ObjcLDClient</code> observeWithKey:owner:handler:, observeWithKeys:owner:handler:, and observeAllWithOwner:handler: for more details.
SWIFT_CLASS_NAMED("ObjcLDChangedFlag")
@interface LDChangedFlag : NSObject
/// String that identifies the feature flag value’s source is nil
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull nilSource;)
+ (NSString * _Nonnull)nilSource SWIFT_WARN_UNUSED_RESULT;
/// String that identifies the feature flag value’s type does not match the requested type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull typeMismatch;)
+ (NSString * _Nonnull)typeMismatch SWIFT_WARN_UNUSED_RESULT;
/// The changed feature flag’s key
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class LDFlagValueSource;

/// Wraps the changed feature flag’s NSArray values and sources.
/// If the flag is not actually a NSArray the SDK sets the old and new value to nil, and old and new valueSource to ‘type mismatch’.
SWIFT_CLASS_NAMED("ObjcLDArrayChangedFlag")
@interface LDArrayChangedFlag : LDChangedFlag
/// The changed flag’s value before it changed
@property (nonatomic, readonly, copy) NSArray * _Nullable oldValue;
/// The changed flag’s value after it changed
@property (nonatomic, readonly, copy) NSArray * _Nullable newValue;
/// The changed flag value’s source before it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull oldValueSource;
/// The changed flag value’s source after it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull newValueSource;
@end


/// Objective-C object that contains an NSArray feature flag’s value and source.
SWIFT_CLASS_NAMED("ObjcLDArrayVariationValue")
@interface LDArrayVariationValue : NSObject
/// The feature flag’s NSArray value
@property (nonatomic, readonly, copy) NSArray * _Nullable value;
/// The feature flag value’s source
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull source;
/// A string representation of the feature flag value’s source
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Wraps the changed feature flag’s BOOL values and sources.
/// If the flag is not actually a BOOL the SDK sets the old and new value to false, and old and new valueSource to ‘type mismatch’.
SWIFT_CLASS_NAMED("ObjcLDBoolChangedFlag")
@interface LDBoolChangedFlag : LDChangedFlag
/// The changed flag’s value before it changed
@property (nonatomic, readonly) BOOL oldValue;
/// The changed flag’s value after it changed
@property (nonatomic, readonly) BOOL newValue;
/// The changed flag value’s source before it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull oldValueSource;
/// The changed flag value’s source after it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull newValueSource;
@end


/// Objective-C object that contains a BOOL feature flag’s value and source.
SWIFT_CLASS_NAMED("ObjcLDBoolVariationValue")
@interface LDBoolVariationValue : NSObject
/// The feature flag’s BOOL value
@property (nonatomic, readonly) BOOL value;
/// The feature flag value’s source
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull source;
/// A string representation of the feature flag value’s source
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@class LDConfig;
@class LDUser;
@class LDIntegerVariationValue;
@class LDDoubleVariationValue;
@class LDStringVariationValue;
@class LDDictionaryVariationValue;
@class LDIntegerChangedFlag;
@class LDDoubleChangedFlag;
@class LDStringChangedFlag;
@class LDDictionaryChangedFlag;

/// The LDClient is the heart of the SDK, providing client apps running iOS, watchOS, macOS, or tvOS access to LaunchDarkly services. This singleton provides the ability to set a configuration (LDConfig) that controls how the LDClient talks to LaunchDarkly servers, and a user (LDUser) that provides finer control on the feature flag values delivered to LDClient. Once the LDClient has started, it connects to LaunchDarkly’s servers to get the feature flag values you set in the Dashboard.
/// <h3>Objc Classes</h3>
/// The SDK creates an Objective-C native style API by wrapping Swift specific classes, properties, and methods into Objective-C wrapper classes prefixed by <code>Objc</code>. By defining Objective-C specific names, client apps written in Objective-C can use a native coding style, including using familiar LaunchDarkly SDK names like <code>LDClient</code>, <code>LDConfig</code>, and <code>LDUser</code>. Objective-C developers should refer to the Objc documentation by following the Objc specific links following type, property, and method names.
/// <h2>Usage</h2>
/// <h3>Startup</h3>
/// <ol>
///   <li>
///     To customize, configure a LDConfig (<code>ObjcLDConfig</code>) and LDUser (<code>ObjcLDUser</code>). The <code>config</code> is required, the <code>user</code> is optional. Both give you additional control over the feature flags delivered to the LDClient. See <code>ObjcLDConfig</code> & <code>ObjcLDUser</code> for more details.
///   </li>
/// </ol>
/// <ul>
///   <li>
///     The mobileKey set into the <code>LDConfig</code> comes from your LaunchDarkly Account settings (on the left, at the bottom). If you have multiple projects be sure to choose the correct Mobile key.
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Call <code>[LDClient.sharedInstance startWithConfig: user: completion:]</code> (<code>ObjcLDClient.startWithConfig(_:config:user:completion:)</code>)
///   </li>
/// </ol>
/// <ul>
///   <li>
///     If you do not pass in a LDUser, LDCLient will create a default for you.
///   </li>
///   <li>
///     The optional completion closure allows the LDClient to notify your app when it has gone online.
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Because the LDClient is a singleton, you do not have to keep a reference to it in your code.
///   </li>
/// </ol>
/// <h3>Getting Feature Flags</h3>
/// Once the LDClient has started, it makes your feature flags available using the <code>variation</code> and <code>variationAndSource</code> methods. A <code>variation</code> is a specific flag value. For example, a boolean feature flag has 2 variations, <code>YES</code> and <code>NO</code>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// \code
/// BOOL boolFlag = [LDClient.sharedInstance boolVariationForKey:@"my-bool-flag" fallback:NO];
///
/// \endcodeIf you need to know the source of the variation provided to you for a specific feature flag, the typed <code>variationAndSource</code> methods return a LDVariationValue with the value & source in a single call.
/// \code
/// LDBoolVariationValue *boolVariationValue = [LDClient.sharedInstance boolVariationAndSourceForKey:@"my-bool-flag" fallback:NO];
/// BOOL boolFlag = boolVariationValue.value;
/// LDFlagValueSource boolFlagSource = boolVariationValue.source;
///
/// \endcodeSee the typed <code>-[LDCLient variationForKey: fallback:]</code> or <code>-[LDClient variationAndSourceForKey: fallback:]</code> methods in the section <em>Feature Flag values</em> for details.
/// <h3>Observing Feature Flags</h3>
/// If you want to know when a feature flag value changes, you can check the flag’s value. You can also use one of several <code>observe</code> methods to have the LDClient notify you when a change occurs. There are several options– you can setup notifications based on when a specific flag changes, when any flag in a collection changes, or when a flag doesn’t change.
/// \code
/// __weak typeof(self) weakSelf = self;
/// [LDClient.sharedInstance observeBool:@"my-bool-flag" owner:self handler:^(LDBoolChangedFlag *changedFlag) {
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf updateFlagWithKey:@"my-bool-flag" changedFlag:changedFlag];
/// }];
///
/// \endcodeThe <code>changedFlag</code> passed in to the block contains the old and new value, and the old and new valueSource. See the typed <code>LDChangedFlag</code> classes in the <em>Obj-C Changed Flags</em>.
SWIFT_CLASS_NAMED("ObjcLDClient")
@interface LDClient : NSObject
/// Access to the LDClient singleton. For iOS apps with watchOS companion apps, there will be a singleton on each platform. These singletons do not communicate with each other. If you try to share feature flags between apps, the latest flag values may be overwritten by old feature flags from the other platform. LaunchDarkly recommends not sharing feature flags between apps and allowing each LDClient to manage feature flags on its own platform. If you share feature flag data between apps, provide a way to prevent the LDClients from overwriting new feature flags with old feature flags in the shared data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LDClient * _Nonnull sharedInstance;)
+ (LDClient * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Reports the online/offline state of the LDClient.
/// When online, the SDK communicates with LaunchDarkly servers for feature flag values and event reporting.
/// When offline, the SDK does not attempt to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers while offline. The SDK will collect events while offline.
/// Use <code>-[LDClient setOnline: completion:]</code> (<code>ObjcLDClient.setOnline(_:completion:)</code>) to change the online/offline state.
@property (nonatomic, readonly) BOOL isOnline;
/// Set the LDClient online/offline.
/// When online, the SDK communicates with LaunchDarkly servers for feature flag values and event reporting.
/// When offline, the SDK does not attempt to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers while offline. The SDK will collect events while offline.
/// The SDK protects itself from multiple rapid calls to <code>setOnline:YES</code> by enforcing an increasing delay (called <em>throttling</em>) each time <code>setOnline:YES</code> is called within a short time. The first time, the call proceeds normally. For each subsequent call the delay is enforced, and if waiting, increased to a maximum delay. When the delay has elapsed, the <code>setOnline:YES</code> will proceed, assuming that the client app has not called <code>setOnline:NO</code> during the delay. Therefore a call to <code>setOnline:YES</code> may not immediately result in the LDClient going online. Client app developers should consider this situation abnormal, and take steps to prevent the client app from making multiple rapid <code>setOnline:YES</code> calls. Calls to <code>setOnline:NO</code> are not throttled. Note that calls to <code>start(config: user: completion:)</code>, and setting the <code>config</code> or <code>user</code> can also call <code>setOnline:YES</code> under certain conditions. After the delay, the SDK resets and the client app can make a susequent call to <code>setOnline:YES</code> without being throttled.
/// Use <code>isOnline</code> to get the online/offline state.
/// \param goOnline Desired online/offline mode for the LDClient
///
- (void)setOnline:(BOOL)goOnline;
/// Set the LDClient online/offline.
/// When online, the SDK communicates with LaunchDarkly servers for feature flag values and event reporting.
/// When offline, the SDK does not attempt to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers while offline. The SDK will collect events while offline.
/// The SDK protects itself from multiple rapid calls to <code>setOnline:YES</code> by enforcing an increasing delay (called <em>throttling</em>) each time <code>setOnline:YES</code> is called within a short time. The first time, the call proceeds normally. For each subsequent call the delay is enforced, and if waiting, increased to a maximum delay. When the delay has elapsed, the <code>setOnline:YES</code> will proceed, assuming that the client app has not called <code>setOnline:NO</code> during the delay. Therefore a call to <code>setOnline:YES</code> may not immediately result in the LDClient going online. Client app developers should consider this situation abnormal, and take steps to prevent the client app from making multiple rapid <code>setOnline:YES</code> calls. Calls to <code>setOnline:NO</code> are not throttled. Note that calls to <code>start(config: user: completion:)</code>, and setting the <code>config</code> or <code>user</code> can also call <code>setOnline:YES</code> under certain conditions. After the delay, the SDK resets and the client app can make a susequent call to <code>setOnline:YES</code> without being throttled.
/// Client apps can set a completion block called when the setOnline call completes. For unthrottled <code>setOnline:YES</code> and all <code>setOnline:NO</code> calls, the SDK will call the block immediately on completion of this method. For throttled <code>setOnline:YES</code> calls, the SDK will call the block after the throttling delay at the completion of the setOnline method.
/// Use <code>isOnline</code> (<code>ObjcLDClient.isOnline</code>)to get the online/offline state.
/// \param goOnline Desired online/offline mode for the LDClient
///
/// \param completion Completion block called when setOnline completes
///
- (void)setOnline:(BOOL)goOnline completion:(void (^ _Nullable)(void))completion;
/// The LDConfig that configures the LDClient. See <code>LDConfig</code> (<code>ObjcLDConfig</code>) for details about what can be configured.
/// Normally, the client app should set desired values into a LDConfig and pass that into <code>[LDClient.sharedInstance startWithMobileKey: config: user: completion:]</code> (<code>ObjcLDClient.startWithMobileKey(_:config:user:completion:)</code>). If the client does not pass a LDConfig to the LDClient, the LDClient creates a LDConfig using all default values.
/// The client app can change the LDConfig by getting the <code>config</code>, adjusting the values, and setting it into the LDClient.
/// When a new config is set, the LDClient goes offline and reconfigures using the new config. If the client was online when the new config was set, it goes online again, subject to a throttling delay if in force (see <code>ObjcLDClient.setOnline(_:completion:)</code> for details). To change both the <code>config</code> and <code>user</code>, set the LDClient offline, set both properties, then set the LDClient online.
@property (nonatomic, strong) LDConfig * _Nonnull config;
/// The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code>LDUser</code> (<code>ObjcLDUser</code>) for details about what information can be retained.
/// Normally, the client app should create and set the LDUser and pass that into <code>[LDClient.sharedInstance startWithMobileKey: config: user: completion:]</code> (<code>ObjcLDClient.startWithMobileKey(_:config:user:completion:)</code>).
/// The client app can change the LDUser by getting the <code>user</code>, adjusting the values, and setting it into the LDClient. This allows client apps to collect information over time from the user and update as information is collected. Client apps should follow <a href="apple.com/legal/privacy">Apple’s Privacy Policy</a> when collecting user information. If the client app does not create a LDUser, LDClient creates an anonymous default user, which can affect the feature flags delivered to the LDClient.
/// When a new user is set, the LDClient goes offline and sets the new user. If the client was online when the new user was set, it goes online again, subject to a throttling delay if in force (see <code>ObjcLDClient.setOnline(_:completion:)</code> for details). To change both the <code>config</code> and <code>user</code>, set the LDClient offline, set both properties, then set the LDClient online.
@property (nonatomic, strong) LDUser * _Nonnull user;
/// Starts the LDClient using the passed in <code>config</code> & <code>user</code>. Call this before requesting feature flag values. The LDClient will not go online until you call this method.
/// Starting the LDClient means setting the <code>config</code> & <code>user</code>, setting the client online if <code>config.startOnline</code> is YES (the default setting), and starting event recording. The client app must start the LDClient before it will report feature flag values. If a client does not call start, the LDClient will only report fallback values, and no events will be recorded.
/// If the start call omits the <code>user</code>, the LDClient uses the previously set <code>user</code>, or the default <code>user</code> if it was never set.
/// Subsequent calls to this method cause the LDClient to go offline, reconfigure using the new <code>config</code> & <code>user</code> (if supplied), and then go online if it was online when start was called. Normally there should only be one call to start. To change <code>config</code> or <code>user</code>, set them directly on LDClient.
/// \param configWrapper The LDConfig that contains the desired configuration. (Required)
///
/// \param userWrapper The LDUser set with the desired user. If omitted, LDClient retains the previously set user, or default if one was never set. (Optional)
///
- (void)startWithConfig:(LDConfig * _Nonnull)configWrapper user:(LDUser * _Nullable)userWrapper;
/// Starts the LDClient using the passed in <code>config</code> & <code>user</code>. Call this before requesting feature flag values. The LDClient will not go online until you call this method.
/// Starting the LDClient means setting the <code>config</code> & <code>user</code>, setting the client online if <code>config.startOnline</code> is YES (the default setting), and starting event recording. The client app must start the LDClient before it will report feature flag values. If a client does not call start, the LDClient will only report fallback values, and no events will be recorded.
/// If the start call omits the <code>user</code>, the LDClient uses the previously set <code>user</code>, or the default <code>user</code> if it was never set.
/// If the start call includes the optional <code>completion</code> block, LDClient calls the <code>completion</code> block when <code>[LDClient.sharedInstance setOnline: completion:]</code> embedded in the start method completes. The start call is subject to throttling delays, therefore the <code>completion</code> block call may be delayed.
/// Subsequent calls to this method cause the LDClient to go offline, reconfigure using the new <code>config</code> & <code>user</code> (if supplied), and then go online if it was online when start was called. Normally there should only be one call to start. To change <code>config</code> or <code>user</code>, set them directly on LDClient.
/// \param configWrapper The LDConfig that contains the desired configuration. (Required)
///
/// \param userWrapper The LDUser set with the desired user. If omitted, LDClient retains the previously set user, or default if one was never set. (Optional)
///
/// \param completion Closure called when the embedded <code>setOnline</code> call completes, subject to throttling delays. (Optional)
///
- (void)startWithConfig:(LDConfig * _Nonnull)configWrapper user:(LDUser * _Nullable)userWrapper completion:(void (^ _Nullable)(void))completion;
/// Stops the LDClient. Stopping the client means the LDClient goes offline and stops recording events. LDClient will no longer provide feature flag values, only returning fallback values.
/// There is almost no reason to stop the LDClient. Normally, set the LDClient offline to stop communication with the LaunchDarkly servers. Stop the LDClient to stop recording events. There is no need to stop the LDClient prior to suspending, moving to the background, or terminating the app. The SDK will respond to these events as the system requires and as configured in LDConfig.
- (void)stop;
/// Returns the BOOL variation for the given feature flag. If the flag does not exist, cannot be cast to a BOOL, or the LDClient is not started, returns the fallback value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>boolVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// BOOL boolFeatureFlagValue = [LDClient.sharedInstance boolVariationForKey:@"my-bool-flag" fallback:NO];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested BOOL feature flag value, or the fallback if the flag is missing or cannot be cast to a BOOL, or the client is not started
- (BOOL)boolVariationForKey:(NSString * _Nonnull)key fallback:(BOOL)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>LDBoolVariationValue</code> (<code>ObjcLDBoolVariationValue</code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a BOOL, or the LDClient is not started, returns the fallback value and <code>LDFlagValueSourceFallback</code> for the source.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>true</em> and <em>false</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>boolVariationAndSource</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// LDBoolVariationValue *boolValueAndSource = [LDClient.sharedInstance boolVariationAndSourceForKey:"my-bool-flag" fallback:YES];
/// BOOL boolFeatureFlagValue = boolValueAndSource.value;
/// LDFlagValueSource boolFeatureFlagSource = boolValueAndSource.source;
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist.
///
///
/// returns:
/// A <code>LDBoolVariationValue</code> (<code>ObjcLDBoolVariationValue</code>) containing the requested feature flag value and source, or the fallback if the flag is missing or cannot be cast to a BOOL, or the client is not started. If the fallback value is returned, the source is <code>LDFlagValueSourceFallback</code>
- (LDBoolVariationValue * _Nonnull)boolVariationAndSourceForKey:(NSString * _Nonnull)key fallback:(BOOL)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the NSInteger variation for the given feature flag. If the flag does not exist, cannot be cast to a NSInteger, or the LDClient is not started, returns the fallback value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>integerVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// NSInteger integerFeatureFlagValue = [LDClient.sharedInstance integerVariationForKey:@"my-integer-flag" fallback:5];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested NSInteger feature flag value, or the fallback if the flag is missing or cannot be cast to a NSInteger, or the client is not started
- (NSInteger)integerVariationForKey:(NSString * _Nonnull)key fallback:(NSInteger)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>LDIntegerVariationValue</code> (<code>ObjcLDIntegerVariationValue</code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a NSInteger, or the LDClient is not started, returns the fallback value and <code>LDFlagValueSourceFallback</code> for the source.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>true</em> and <em>false</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>integerVariationAndSource</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// LDIntegerVariationValue *integerValueAndSource = [LDClient.sharedInstance integerVariationAndSourceForKey:"my-integer-flag" fallback:YES];
/// NSInteger integerFeatureFlagValue = integerValueAndSource.value;
/// LDFlagValueSource integerFeatureFlagSource = integerValueAndSource.source;
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist.
///
///
/// returns:
/// A <code>LDIntegerVariationValue</code> (<code>ObjcLDIntegerVariationValue</code>) containing the requested feature flag value and source, or the fallback if the flag is missing or cannot be cast to a NSInteger, or the client is not started. If the fallback value is returned, the source is <code>LDFlagValueSourceFallback</code>
- (LDIntegerVariationValue * _Nonnull)integerVariationAndSourceForKey:(NSString * _Nonnull)key fallback:(NSInteger)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the double variation for the given feature flag. If the flag does not exist, cannot be cast to a double, or the LDClient is not started, returns the fallback value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>doubleVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// double doubleFeatureFlagValue = [LDClient.sharedInstance doubleVariationForKey:@"my-double-flag" fallback:2.71828];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested double feature flag value, or the fallback if the flag is missing or cannot be cast to a double, or the client is not started
- (double)doubleVariationForKey:(NSString * _Nonnull)key fallback:(double)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>LDDoubleVariationValue</code> (<code>ObjcLDDoubleVariationValue</code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a double, or the LDClient is not started, returns the fallback value and <code>LDFlagValueSourceFallback</code> for the source.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>true</em> and <em>false</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>doubleVariationAndSource</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// LDDoubleVariationValue *doubleValueAndSource = [LDClient.sharedInstance doubleVariationAndSourceForKey:"my-double-flag" fallback:2.71828];
/// double doubleFeatureFlagValue = doubleValueAndSource.value;
/// LDFlagValueSource doubleFeatureFlagSource = doubleValueAndSource.source;
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist.
///
///
/// returns:
/// A <code>LDDoubleVariationValue</code> (<code>ObjcLDDoubleVariationValue</code>) containing the requested feature flag value and source, or the fallback if the flag is missing or cannot be cast to a double, or the client is not started. If the fallback value is returned, the source is <code>LDFlagValueSourceFallback</code>
- (LDDoubleVariationValue * _Nonnull)doubleVariationAndSourceForKey:(NSString * _Nonnull)key fallback:(double)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the NSString variation for the given feature flag. If the flag does not exist, cannot be cast to a NSString, or the LDClient is not started, returns the fallback value, which may be nil.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>stringVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// NSString *stringFeatureFlagValue = [LDClient.sharedInstance stringVariationForKey:@"my-string-flag" fallback:@"<fallback>"];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist. The fallback value may be nil.
///
///
/// returns:
/// The requested NSString feature flag value, or the fallback value (which may be nil) if the flag is missing or cannot be cast to a NSString, or the client is not started.
- (NSString * _Nullable)stringVariationForKey:(NSString * _Nonnull)key fallback:(NSString * _Nullable)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>LDStringVariationValue</code> (<code>ObjcLDStringVariationValue</code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a NSString, or the LDClient is not started, returns the fallback value (which may be nil) and <code>LDFlagValueSourceFallback</code> for the source.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>true</em> and <em>false</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>doubleVariationAndSource</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// LDStringVariationValue *stringValueAndSource = [LDClient.sharedInstance stringVariationAndSourceForKey:"my-string-flag" fallback:@"<fallback>"];
/// NSString *stringFeatureFlagValue = stringValueAndSource.value;
/// LDFlagValueSource stringFeatureFlagSource = stringValueAndSource.source;
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist. The fallback value may be nil.
///
///
/// returns:
/// A <code>LDStringVariationValue</code> (<code>ObjcLDStringVariationValue</code>) containing the requested feature flag value and source, or the fallback value (which may be nil) if the flag is missing or cannot be cast to a NSString, or the client is not started. If the fallback value is returned, the source is <code>LDFlagValueSourceFallback</code>
- (LDStringVariationValue * _Nonnull)stringVariationAndSourceForKey:(NSString * _Nonnull)key fallback:(NSString * _Nullable)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the NSArray variation for the given feature flag. If the flag does not exist, cannot be cast to a NSArray, or the LDClient is not started, returns the fallback value, which may be nil..
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>arrayVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// NSArray *arrayFeatureFlagValue = [LDClient.sharedInstance arrayVariationForKey:@"my-array-flag" fallback:@[@1,@2,@3]];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist. The fallback value may be nil.
///
///
/// returns:
/// The requested NSArray feature flag value, or the fallback value (which may be nil) if the flag is missing or cannot be cast to a NSArray, or the client is not started
- (NSArray * _Nullable)arrayVariationForKey:(NSString * _Nonnull)key fallback:(NSArray * _Nullable)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>LDArrayVariationValue</code> (<code>ObjcLDArrayVariationValue</code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a NSArray, or the LDClient is not started, returns the fallback value (which may be nil) and <code>LDFlagValueSourceFallback</code> for the source.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>true</em> and <em>false</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>arrayVariationAndSource</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// LDArrayVariationValue *arrayValueAndSource = [LDClient.sharedInstance arrayVariationAndSourceForKey:"my-array-flag" fallback:@[@1,@2,@3]];
/// NSArray *arrayFeatureFlagValue = arrayValueAndSource.value;
/// LDFlagValueSource arrayFeatureFlagSource = arrayValueAndSource.source;
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist. The fallback value may be nil.
///
///
/// returns:
/// A <code>LDArrayVariationValue</code> (<code>ObjcLDArrayVariationValue</code>) containing the requested feature flag value and source, or the fallback value (which may be nil) if the flag is missing or cannot be cast to a NSArray, or the client is not started. If the fallback value is returned, the source is <code>LDFlagValueSourceFallback</code>
- (LDArrayVariationValue * _Nonnull)arrayVariationAndSourceForKey:(NSString * _Nonnull)key fallback:(NSArray * _Nullable)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the NSDictionary variation for the given feature flag. If the flag does not exist, cannot be cast to a NSDictionary, or the LDClient is not started, returns the fallback value, which may be nil..
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>dictionaryVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// NSDictionary *dictionaryFeatureFlagValue = [LDClient.sharedInstance dictionaryVariationForKey:@"my-dictionary-flag" fallback:@{@"dictionary":@"fallback"}];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist. The fallback value may be nil.
///
///
/// returns:
/// The requested NSDictionary feature flag value, or the fallback value (which may be nil) if the flag is missing or cannot be cast to a NSDictionary, or the client is not started
- (NSDictionary<NSString *, id> * _Nullable)dictionaryVariationForKey:(NSString * _Nonnull)key fallback:(NSDictionary<NSString *, id> * _Nullable)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>LDDictionaryVariationValue</code> (<code>ObjcLDDictionaryVariationValue</code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a NSDictionary, or the LDClient is not started, returns the fallback value (which may be nil) and <code>LDFlagValueSourceFallback</code> for the source.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>true</em> and <em>false</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDFlagValue</code> for the available types.
/// The LDClient must be started in order to return feature flag values. If the LDClient is not started, it will always return the fallback value. The LDClient must be online to keep the feature flag values up-to-date.
/// See <code>LDStreamingMode</code> for details about the modes the LDClient uses to update feature flags.
/// When offline, LDClient closes the clientstream connection and no longer requests feature flags. The LDClient will return feature flag values (assuming the LDClient was started), which may not match the values set on the LaunchDarkly server.
/// A call to <code>dictionaryVariationAndSource</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// LDDictionaryVariationValue *dictionaryValueAndSource = [LDClient.sharedInstance dictionaryVariationAndSourceForKey:"my-dictionary-flag" fallback:@{@"dictionary":@"fallback"}];
/// NSDictionary *dictionaryFeatureFlagValue = dictionaryValueAndSource.value;
/// LDFlagValueSource dictionaryFeatureFlagSource = dictionaryValueAndSource.source;
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param fallback The fallback value to return if the feature flag key does not exist. The fallback value may be nil.
///
///
/// returns:
/// A <code>LDDictionaryVariationValue</code> (<code>ObjcLDDictionaryVariationValue</code>) containing the requested feature flag value and source, or the fallback value (which may be nil) if the flag is missing or cannot be cast to a NSDictionary, or the client is not started. If the fallback value is returned, the source is <code>LDFlagValueSourceFallback</code>
- (LDDictionaryVariationValue * _Nonnull)dictionaryVariationAndSourceForKey:(NSString * _Nonnull)key fallback:(NSDictionary<NSString *, id> * _Nullable)fallback SWIFT_WARN_UNUSED_RESULT;
/// Returns a dictionary with the flag keys and their values. If the LDClient is not started, returns nil.
/// The dictionary will not contain feature flags from the server with null values.
/// LDClient will not provide any source or change information, only flag keys and flag values. The client app should convert the feature flag value into the desired type.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable allFlagValues;
/// Sets a handler for the specified BOOL flag key executed on the specified owner. If the flag’s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code>ObjcLDBoolChangedFlag</code> for details.
/// The SDK retains only weak references to the owner, which allows the client app to freely destroy owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDBoolChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [LDClient.sharedInstance observeBool:"my-bool-flag" owner:self handler:^(LDBoolChangedFlag *changedFlag){
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf showBoolChangedFlag:changedFlag];
/// }];
///
/// \endcode\param key The LDFlagKey for the flag to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The block the SDK will execute when the feature flag changes.
///
- (void)observeBool:(NSString * _Nonnull)key owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(LDBoolChangedFlag * _Nonnull))handler;
/// Sets a handler for the specified NSInteger flag key executed on the specified owner. If the flag’s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code>ObjcLDIntegerChangedFlag</code> for details.
/// The SDK retains only weak references to the owner, which allows the client app to freely destroy owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDIntegerChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [LDClient.sharedInstance observeInteger:"my-integer-flag" owner:self handler:^(LDIntegerChangedFlag *changedFlag){
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf showIntegerChangedFlag:changedFlag];
/// }];
///
/// \endcode\param key The LDFlagKey for the flag to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The block the SDK will execute when the feature flag changes.
///
- (void)observeInteger:(NSString * _Nonnull)key owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(LDIntegerChangedFlag * _Nonnull))handler;
/// Sets a handler for the specified double flag key executed on the specified owner. If the flag’s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code>ObjcLDDoubleChangedFlag</code> for details.
/// The SDK retains only weak references to the owner, which allows the client app to freely destroy owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDDoubleChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [LDClient.sharedInstance observeDouble:"my-double-flag" owner:self handler:^(LDDoubleChangedFlag *changedFlag){
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf showDoubleChangedFlag:changedFlag];
/// }];
///
/// \endcode\param key The LDFlagKey for the flag to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The block the SDK will execute when the feature flag changes.
///
- (void)observeDouble:(NSString * _Nonnull)key owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(LDDoubleChangedFlag * _Nonnull))handler;
/// Sets a handler for the specified NSString flag key executed on the specified owner. If the flag’s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code>ObjcLDStringChangedFlag</code> for details.
/// The SDK retains only weak references to the owner, which allows the client app to freely destroy owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDStringChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [LDClient.sharedInstance observeString:"my-string-flag" owner:self handler:^(LDStringChangedFlag *changedFlag){
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf showStringChangedFlag:changedFlag];
/// }];
///
/// \endcode\param key The LDFlagKey for the flag to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The block the SDK will execute when the feature flag changes.
///
- (void)observeString:(NSString * _Nonnull)key owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(LDStringChangedFlag * _Nonnull))handler;
/// Sets a handler for the specified NSArray flag key executed on the specified owner. If the flag’s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code>ObjcLDArrayChangedFlag</code> for details.
/// The SDK retains only weak references to the owner, which allows the client app to freely destroy owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDArrayChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [LDClient.sharedInstance observeArray:"my-array-flag" owner:self handler:^(LDArrayChangedFlag *changedFlag){
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf showArrayChangedFlag:changedFlag];
/// }];
///
/// \endcode\param key The LDFlagKey for the flag to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The block the SDK will execute when the feature flag changes.
///
- (void)observeArray:(NSString * _Nonnull)key owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(LDArrayChangedFlag * _Nonnull))handler;
/// Sets a handler for the specified NSDictionary flag key executed on the specified owner. If the flag’s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code>ObjcLDDictionaryChangedFlag</code> for details.
/// The SDK retains only weak references to the owner, which allows the client app to freely destroy owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDDictionaryChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [LDClient.sharedInstance observeDictionary:"my-dictionary-flag" owner:self handler:^(LDDictionaryChangedFlag *changedFlag){
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf showDictionaryChangedFlag:changedFlag];
/// }];
///
/// \endcode\param key The LDFlagKey for the flag to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The block the SDK will execute when the feature flag changes.
///
- (void)observeDictionary:(NSString * _Nonnull)key owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(LDDictionaryChangedFlag * _Nonnull))handler;
/// Sets a handler for the specified flag keys executed on the specified owner. If any observed flag’s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values, and old and new flag value source. See LDChangedFlag (<code>ObjcLDChangedFlag</code>) for details.
/// The SDK retains only weak references to owner, which allows the client app to freely destroy change owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [LDClient.sharedInstance observeKeys:@[@"my-bool-flag",@"my-string-flag", @"my-dictionary-flag"] owner:self handler:^(NSDictionary<NSString *,LDChangedFlag *> * _Nonnull changedFlags) {
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    //There will be a typed LDChangedFlag entry in changedFlags for each changed flag. The block will only be called once regardless of how many flags changed.
///    [strongSelf showChangedFlags: changedFlags];
/// }];
///
/// \endcode\param keys An array of NSString* flag keys for the flags to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The LDFlagCollectionChangeHandler the SDK will execute 1 time when any of the observed feature flags change.
///
- (void)observeKeys:(NSArray<NSString *> * _Nonnull)keys owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(NSDictionary<NSString *, LDChangedFlag *> * _Nonnull))handler;
/// Sets a handler for all flag keys executed on the specified owner. If any flag’s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values, and old and new flag value source. See LDChangedFlag (<code>ObjcLDChangedFlag</code>) for details.
/// The SDK retains only weak references to owner, which allows the client app to freely destroy change owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [LDClient.sharedInstance observeAllKeysWithOwner:self handler:^(NSDictionary<NSString *,LDChangedFlag *> * _Nonnull changedFlags) {
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    //There will be a typed LDChangedFlag entry in changedFlags for each changed flag. The block will only be called once regardless of how many flags changed.
///    [strongSelf showChangedFlags:changedFlags];
/// }];
///
/// \endcode\param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The LDFlagCollectionChangeHandler the SDK will execute 1 time when any of the observed feature flags change.
///
- (void)observeAllKeysWithOwner:(id _Nonnull)owner handler:(void (^ _Nonnull)(NSDictionary<NSString *, LDChangedFlag *> * _Nonnull))handler;
/// Sets a handler executed when a flag update leaves the flags unchanged from their previous values.
/// This handler can only ever be called when the LDClient is polling.
/// The SDK retains only weak references to owner, which allows the client app to freely destroy change owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [[LDClient sharedInstance] observeFlagsUnchangedWithOwner:self handler:^{
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    //do something after the flags were not updated. The block will be called once on the main thread if the client is polling and the poll did not change any flag values.
///    [self checkFeatureValues];
/// }];
///
/// \endcode\param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The LDFlagsUnchangedHandler the SDK will execute 1 time when a flag request completes with no flags changed.
///
- (void)observeFlagsUnchangedWithOwner:(id _Nonnull)owner handler:(void (^ _Nonnull)(void))handler;
/// Removes all observers for the given owner, including a flagsUnchangedObserver
/// The client app does not have to call this method. If the client app deinits a LDFlagChangeOwner, the SDK will automatically remove its handlers without ever calling them again.
/// \param owner The LDFlagChangeOwner owning the handlers to remove, whether a flag change handler or flags unchanged handler.
///
- (void)stopObservingForOwner:(id _Nonnull)owner;
/// Sets a block called if the client is unable to contact the LaunchDarkly server. Unlike the observer methods, only 1 block can be set at any given time. The SDK keeps a strong reference to the block. Client apps should take care to remove the block prior to deinit on the owner in order to avoid the SDK causing an object to not be destroyed when expected.
/// \param handler The block the SDK will execute 1 time when the client is unable to contact the LaunchDarkly server
///
- (void)setOnServerUnavailable:(void (^ _Nullable)(void))handler;
/// Adds a custom event to the LDClient event store. A client app can set a tracking event to allow client customized data analysis. Once an app has called <code>trackEvent</code>, the app cannot remove the event from the event store.
/// LDClient periodically transmits events to LaunchDarkly based on the frequency set in LDConfig.eventFlushInterval. The LDClient must be started and online. Ths SDK stores events tracked while the LDClient is offline, but started.
/// Once the SDK’s event store is full, the SDK discards events until they can be reported to LaunchDarkly. Configure the size of the event store using <code>eventCapacity</code> on the <code>config</code>. See <code>LDConfig</code> (<code>ObjcLDConfig</code>) for details.
/// <h3>Usage</h3>
/// \code
/// [LDClient.sharedInstance trackEventWithKey:@"event-key" data:@{@"event-data-key":7}];
///
/// \endcode\param key The key for the event. The SDK does nothing with the key, which can be any string the client app sends
///
/// \param data The data for the event. The SDK does nothing with the data, which can be any valid JSON item the client app sends. (Optional)
///
/// \param error NSError object to hold the invalidJsonObject error if the data is not a valid JSON item. (Optional)
///
- (BOOL)trackEventWithKey:(NSString * _Nonnull)key data:(id _Nullable)data error:(NSError * _Nullable * _Nullable)error;
/// Report events to LaunchDarkly servers. While online, the LDClient automatically reports events on the <code>LDConfig.eventFlushInterval</code>, and whenever the client app moves to the background. There should normally not be a need to call reportEvents.
- (void)reportEvents;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Use LDConfig to configure the LDClient. When initialized, a LDConfig contains the default values which can be changed as needed.
/// The client app can change the LDConfig by getting the <code>config</code> from LDClient (<code>ObjcLDClient</code>), adjusting the values, and setting it back into the LDClient (<code>ObjcLDClient</code>).
SWIFT_CLASS_NAMED("ObjcLDConfig")
@interface LDConfig : NSObject
/// The Mobile key from your <a href="app.launchdarkly.com">LaunchDarkly Account</a> settings (on the left at the bottom). If you have multiple projects be sure to choose the correct Mobile key.
@property (nonatomic, copy) NSString * _Nonnull mobileKey;
/// The url for making feature flag requests. Do not change unless instructed by LaunchDarkly.
@property (nonatomic, copy) NSURL * _Nonnull baseUrl;
/// The url for making event reports. Do not change unless instructed by LaunchDarkly.
@property (nonatomic, copy) NSURL * _Nonnull eventsUrl;
/// The url for connecting to the <em>clientstream</em>. Do not change unless instructed by LaunchDarkly.
@property (nonatomic, copy) NSURL * _Nonnull streamUrl;
/// The maximum number of analytics events the LDClient can store. When the LDClient event store reaches the eventCapacity, the SDK discards events until it successfully reports them to LaunchDarkly. (Default: 100)
@property (nonatomic) NSInteger eventCapacity;
/// The timeout interval for flag requests and event reports. (Default: 10 seconds)
@property (nonatomic) NSTimeInterval connectionTimeout;
/// The time interval between event reports (Default: 30 seconds)
@property (nonatomic) NSTimeInterval eventFlushInterval;
/// The interval between feature flag requests. Used only for polling mode. (Default: 5 minutes)
@property (nonatomic) NSTimeInterval flagPollingInterval;
/// The interval between feature flag requests while running in the background. Used only for polling mode. (Default: 60 minutes)
@property (nonatomic) NSTimeInterval backgroundFlagPollingInterval;
/// The minimum interval between feature flag requests. Used only for polling mode. (5 minutes)
@property (nonatomic, readonly) NSTimeInterval minFlagPollingInterval;
/// The minimum interval between feature flag requests while running in the background. Used only for polling mode. (15 minutes)
@property (nonatomic, readonly) NSTimeInterval minBackgroundFlagPollInterval;
/// Controls the method the SDK uses to keep feature flags updated. When set to .streaming, connects to <code>clientstream</code> which notifies the SDK of feature flag changes. When set to .polling, an efficient polling mechanism is used to periodically request feature flag values. Ignored for watchOS, which always uses .polling. See <code>LDStreamingMode</code> for more details. (Default: .streaming)
@property (nonatomic) BOOL streamingMode;
/// Enables feature flag updates when your app is in the background. Allowed on macOS only. (Default: NO)
@property (nonatomic) BOOL enableBackgroundUpdates;
/// Controls LDClient start behavior. When YES, calling start causes LDClient to go online. When NO, calling start causes LDClient to remain offline. If offline at start, set the client online to receive flag updates. (Default: YES)
@property (nonatomic) BOOL startOnline;
/// Treat all user attributes as private for event reporting for all users.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// When YES, ignores values in either LDConfig.privateUserAttributes or LDUser.privateAttributes. (Default: NO)
/// See Also: <code>privateUserAttributes</code> and <code>LDUser.privateAttributes</code> (<code>ObjcLDUser.privateAttributes</code>)
@property (nonatomic) BOOL allUserAttributesPrivate;
/// User attributes and top level custom dictionary keys to treat as private for event reporting for all users.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// See <code>LDUser.privatizableAttributes</code> (<code>ObjcLDUser.privatizableAttributes</code>) for the attribute names that can be declared private. To set private user attributes for a specific user, see <code>LDUser.privateAttributes</code> (<code>ObjcLDUser.privateAttributes</code>). (Default: nil)
/// See Also: <code>allUserAttributesPrivate</code>, <code>LDUser.privatizableAttributes</code> (<code>ObjcLDUser.privatizableAttributes</code>), and <code>LDUser.privateAttributes</code> (<code>ObjcLDUser.privateAttributes</code>).
@property (nonatomic, copy) NSArray<NSString *> * _Nullable privateUserAttributes;
/// Directs the SDK to use REPORT for HTTP requests to connect to <code>clientstream</code> and make feature flag requests. When NO the SDK uses GET for these requests. Do not use unless advised by LaunchDarkly. (Default: NO)
@property (nonatomic) BOOL useReport;
/// Controls how the SDK reports the user in analytics event reports. When set to YES, event reports will contain the user attributes, except attributes marked as private. When set to NO, event reports will contain the user’s key only, reducing the size of event reports. (Default: NO)
@property (nonatomic) BOOL inlineUserInEvents;
/// Enables logging for debugging. (Default: NO)
@property (nonatomic) BOOL debugMode;
/// LDConfig constructor. Configurable values are all set to their default values. The client app can modify these values as desired. Note that client app developers may prefer to get the LDConfig from <code>LDClient.config</code> (<code>ObjcLDClient.config</code>) in order to retain previously set values.
- (nonnull instancetype)initWithMobileKey:(NSString * _Nonnull)mobileKey OBJC_DESIGNATED_INITIALIZER;
/// Compares the settable properties in 2 LDConfig structs
- (BOOL)isEqualWithObject:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Wraps the changed feature flag’s NSDictionary values and sources.
/// If the flag is not actually an NSDictionary the SDK sets the old and new value to nil, and old and new valueSource to ‘type mismatch’.
SWIFT_CLASS_NAMED("ObjcLDDictionaryChangedFlag")
@interface LDDictionaryChangedFlag : LDChangedFlag
/// The changed flag’s value before it changed
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable oldValue;
/// The changed flag’s value after it changed
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable newValue;
/// The changed flag value’s source before it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull oldValueSource;
/// The changed flag value’s source after it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull newValueSource;
@end


/// Objective-C object that contains an NSDictionary feature flag’s value and source.
SWIFT_CLASS_NAMED("ObjcLDDictionaryVariationValue")
@interface LDDictionaryVariationValue : NSObject
/// The feature flag’s NSDictionary value
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable value;
/// The feature flag value’s source
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull source;
/// A string representation of the feature flag value’s source
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Wraps the changed feature flag’s double values and sources.
/// If the flag is not actually a double the SDK sets the old and new value to 0.0, and old and new valueSource to ‘type mismatch’.
SWIFT_CLASS_NAMED("ObjcLDDoubleChangedFlag")
@interface LDDoubleChangedFlag : LDChangedFlag
/// The changed flag’s value before it changed
@property (nonatomic, readonly) double oldValue;
/// The changed flag’s value after it changed
@property (nonatomic, readonly) double newValue;
/// The changed flag value’s source before it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull oldValueSource;
/// The changed flag value’s source after it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull newValueSource;
@end


/// Objective-C object that contains a double feature flag’s value and source.
SWIFT_CLASS_NAMED("ObjcLDDoubleVariationValue")
@interface LDDoubleVariationValue : NSObject
/// The feature flag’s double value
@property (nonatomic, readonly) double value;
/// The feature flag value’s source
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull source;
/// A string representation of the feature flag value’s source
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Defines the types and values of a feature flag. The SDK limits feature flags to these types by use of the <code>LDFlagValueConvertible</code> protocol, which uses this type. Client app developers should not construct an LDFlagValue. See <code>LDFlagValue</code> for the types of feature flags available.
SWIFT_CLASS_NAMED("ObjcLDFlagValue")
@interface LDFlagValue : NSObject
/// String representation of the type of the feature flag.
@property (nonatomic, readonly, copy) NSString * _Nullable flagValueType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Defines the possible sources for feature flag values.
/// See also: <code>LDClient.variationAndSource(forKey:fallback:)</code> and <code>LDChangedFlag</code>
SWIFT_CLASS_NAMED("ObjcLDFlagValueSource")
@interface LDFlagValueSource : NSObject
/// LDFlagValueSource constant indicating the source is nil.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger nilSource;)
+ (NSInteger)nilSource SWIFT_WARN_UNUSED_RESULT;
/// LDFlagValueSource constant indicating the source is the server.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger server;)
+ (NSInteger)server SWIFT_WARN_UNUSED_RESULT;
/// LDFlagValueSource constant indicating the source is the cache.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger cache;)
+ (NSInteger)cache SWIFT_WARN_UNUSED_RESULT;
/// LDFlagValueSource constant indicating the source is the fallback value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger fallback;)
+ (NSInteger)fallback SWIFT_WARN_UNUSED_RESULT;
/// LDFlagValueSource constant indicating the actual flag type differs from the type requested by the client.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger typeMismatch;)
+ (NSInteger)typeMismatch SWIFT_WARN_UNUSED_RESULT;
/// Initializer that takes an integer and returns the LDFlagValueSource provided the integer matches one of the LDFlagValueSource constants. Otherwise, returns nil.
- (nullable instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
/// Property that converts the LDFlagValueSource into an integer matching one of the LDFlagValueSource constants.
@property (nonatomic, readonly) NSInteger rawValue;
/// Property that converts the LDFlagValueSource into a string describing one of the LDFlagValueSource constants.
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
/// Compares a LDFlagValueSource to another object, returning true when the object is the same as the receiver.
- (BOOL)isEqualToObject:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Compares a LDFlagValueSource to an Int, returning true when the receiver has the same raw value as the constantValue.
- (BOOL)isEqualToConstant:(NSInteger)constantValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Wraps the changed feature flag’s NSInteger values and sources.
/// If the flag is not actually an NSInteger the SDK sets the old and new value to 0, and old and new valueSource to ‘type mismatch’.
SWIFT_CLASS_NAMED("ObjcLDIntegerChangedFlag")
@interface LDIntegerChangedFlag : LDChangedFlag
/// The changed flag’s value before it changed
@property (nonatomic, readonly) NSInteger oldValue;
/// The changed flag’s value after it changed
@property (nonatomic, readonly) NSInteger newValue;
/// The changed flag value’s source before it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull oldValueSource;
/// The changed flag value’s source after it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull newValueSource;
@end


/// Objective-C object that contains an NSInteger feature flag’s value and source.
SWIFT_CLASS_NAMED("ObjcLDIntegerVariationValue")
@interface LDIntegerVariationValue : NSObject
/// The feature flag’s NSInteger value
@property (nonatomic, readonly) NSInteger value;
/// The feature flag value’s source
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull source;
/// A string representation of the feature flag value’s source
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Wraps the changed feature flag’s NSString values and sources.
/// If the flag is not actually an NSString the SDK sets the old and new value to nil, and old and new valueSource to ‘type mismatch’.
SWIFT_CLASS_NAMED("ObjcLDStringChangedFlag")
@interface LDStringChangedFlag : LDChangedFlag
/// The changed flag’s value before it changed
@property (nonatomic, readonly, copy) NSString * _Nullable oldValue;
/// The changed flag’s value after it changed
@property (nonatomic, readonly, copy) NSString * _Nullable newValue;
/// The changed flag value’s source before it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull oldValueSource;
/// The changed flag value’s source after it changed
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull newValueSource;
@end


/// Objective-C object that contains an NSString feature flag’s value and source.
SWIFT_CLASS_NAMED("ObjcLDStringVariationValue")
@interface LDStringVariationValue : NSObject
/// The feature flag’s NSString value
@property (nonatomic, readonly, copy) NSString * _Nullable value;
/// The feature flag value’s source
@property (nonatomic, readonly, strong) LDFlagValueSource * _Nonnull source;
/// A string representation of the feature flag value’s source
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// LDUser allows clients to collect information about users in order to refine the feature flag values sent to the SDK. For example, the client app may launch with the SDK defined anonymous user. As the user works with the client app, information may be collected as needed and sent to LaunchDarkly. The client app controls the information collected, which LaunchDarkly does not use except as the client directs to refine feature flags. Client apps should follow <a href="apple.com/legal/privacy">Apple’s Privacy Policy</a> when collecting user information.
/// The SDK caches last known feature flags for use on app startup to provide continuity with the last app run. Provided the LDClient is online and can establish a connection with LaunchDarkly servers, cached information will only be used a very short time. Once the latest feature flags arrive at the SDK, the SDK no longer uses cached feature flags. The SDK retains feature flags on the last 5 client defined users. The SDK will retain feature flags until they are overwritten by a different user’s feature flags, or until the user removes the app from the device.
/// The SDK does not cache user information collected, except for the user key. The user key is used to identify the cached feature flags for that user. Client app developers should use caution not to use sensitive user information as the user-key.
SWIFT_CLASS_NAMED("ObjcLDUser")
@interface LDUser : NSObject
/// LDUser attributes that can be marked private.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// See Also: <code>ObjcLDConfig.allUserAttributesPrivate</code>, <code>ObjcLDConfig.privateUserAttributes</code>, and <code>privateAttributes</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull privatizableAttributes;)
+ (NSArray<NSString *> * _Nonnull)privatizableAttributes SWIFT_WARN_UNUSED_RESULT;
/// LDUser name attribute used to make <code>name</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeName;)
+ (NSString * _Nonnull)attributeName SWIFT_WARN_UNUSED_RESULT;
/// LDUser firstName attribute used to make <code>firstName</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeFirstName;)
+ (NSString * _Nonnull)attributeFirstName SWIFT_WARN_UNUSED_RESULT;
/// LDUser lastName attribute used to make <code>lastName</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeLastName;)
+ (NSString * _Nonnull)attributeLastName SWIFT_WARN_UNUSED_RESULT;
/// LDUser country attribute used to make <code>country</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeCountry;)
+ (NSString * _Nonnull)attributeCountry SWIFT_WARN_UNUSED_RESULT;
/// LDUser ipAddress attribute used to make <code>ipAddress</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeIPAddress;)
+ (NSString * _Nonnull)attributeIPAddress SWIFT_WARN_UNUSED_RESULT;
/// LDUser email attribute used to make <code>email</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeEmail;)
+ (NSString * _Nonnull)attributeEmail SWIFT_WARN_UNUSED_RESULT;
/// LDUser avatar attribute used to make <code>avatar</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeAvatar;)
+ (NSString * _Nonnull)attributeAvatar SWIFT_WARN_UNUSED_RESULT;
/// LDUser custom attribute used to make <code>custom</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeCustom;)
+ (NSString * _Nonnull)attributeCustom SWIFT_WARN_UNUSED_RESULT;
/// Client app defined string that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user. The key cannot be made private.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// Client app defined name for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable name;
/// Client app defined first name for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable firstName;
/// Client app defined last name for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable lastName;
/// Client app defined country for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable country;
/// Client app defined ipAddress for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable ipAddress;
/// Client app defined email address for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable email;
/// Client app defined avatar for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable avatar;
/// Client app defined dictionary for the user. The client app may declare top level dictionary items as private. If the client app defines custom as private, the SDK considers the dictionary private except for device & operatingSystem (which cannot be made private). See <code>privateAttributes</code> for details. (Default: nil)
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable custom;
/// Client app defined isAnonymous for the user. If the client app does not define isAnonymous, the SDK will use the <code>key</code> to set this attribute. isAnonymous cannot be made private. (Default: YES)
@property (nonatomic) BOOL isAnonymous;
/// Client app defined device for the user. The SDK will determine the device automatically, however the client app can override the value. The SDK will insert the device into the <code>custom</code> dictionary. The device cannot be made private. (Default: the system identified device)
@property (nonatomic, copy) NSString * _Nullable device;
/// Client app defined operatingSystem for the user. The SDK will determine the operatingSystem automatically, however the client app can override the value. The SDK will insert the operatingSystem into the <code>custom</code> dictionary. The operatingSystem cannot be made private. (Default: the system identified operating system)
@property (nonatomic, copy) NSString * _Nullable operatingSystem;
/// Client app defined privateAttributes for the user.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// This attribute is ignored if <code>ObjcLDConfig.allUserAttributesPrivate</code> is YES. Combined with <code>ObjcLDConfig.privateUserAttributes</code>. The SDK considers attributes appearing in either list as private. Client apps may define attributes found in <code>privatizableAttributes</code> and top level <code>custom</code> dictionary keys here. (Default: nil)
/// See Also: <code>ObjcLDConfig.allUserAttributesPrivate</code> and <code>ObjcLDConfig.privateUserAttributes</code>.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable privateAttributes;
/// Initializer to create a LDUser. Client configurable attributes are set to their default value. The SDK will automatically set <code>key</code>, <code>device</code>, <code>operatingSystem</code>, and <code>isAnonymous</code> attributes. The SDK embeds <code>device</code> and <code>operatingSystem</code> into the <code>custom</code> dictionary for transmission to LaunchDarkly.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer to create a LDUser with a specific key. Other client configurable attributes are set to their default value. The SDK will automatically set <code>key</code>, <code>device</code>, <code>operatingSystem</code>, and <code>isAnonymous</code> attributes. The SDK embeds <code>device</code> and <code>operatingSystem</code> into the <code>custom</code> dictionary for transmission to LaunchDarkly.
/// \param key String that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user.
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key OBJC_DESIGNATED_INITIALIZER;
/// Failable Initializer that takes any object and attempts to create a LDUser from the object. If the object is a NSDictionary, constructs the LDUser via -[LDUser initWithUserDictionary:]
/// \param object Any object. The initializer will attempt to convert the object into a NSDictionary and construct the LDUser
///
- (nullable instancetype)initWithObject:(id _Nullable)object OBJC_DESIGNATED_INITIALIZER;
/// Initializer that takes a NSDictionary and creates a LDUser from the contents. Uses any keys present to define corresponding attribute values. Initializes attributes not present in the dictionary to their default value. The initializer attempts to set <code>device</code> and <code>operatingSystem</code> from corresponding values embedded in <code>custom</code>. The initializer attempts to set feature flags from values set in <code>config</code>.
/// \param userDictionary NSDictionary with LDUser attribute keys and values.
///
- (nonnull instancetype)initWithUserDictionary:(NSDictionary<NSString *, id> * _Nonnull)userDictionary OBJC_DESIGNATED_INITIALIZER;
/// Compares users by comparing their user keys only, to allow the client app to collect user information over time
- (BOOL)isEqualWithObject:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
