#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef LAUNCHDARKLY_TVOS_SWIFT_H
#define LAUNCHDARKLY_TVOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LaunchDarkly_tvOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





/// An error thrown from APIs when an invalid argument is provided.
SWIFT_CLASS("_TtC17LaunchDarkly_tvOS22LDInvalidArgumentError")
@interface LDInvalidArgumentError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class providing ObjC interoperability with the LDUser struct
SWIFT_CLASS("_TtC17LaunchDarkly_tvOS13LDUserWrapper")
@interface LDUserWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class LDValue;

/// Structure that contains the evaluation result and additional information when evaluating a flag as a boolean.
SWIFT_CLASS_NAMED("ObjcLDBoolEvaluationDetail")
@interface LDBoolEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly) BOOL value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Collects the elements of a feature flag that changed as a result of a <code>clientstream</code> update or feature flag request. The SDK will pass a typed ObjcLDChangedFlag or a collection of ObjcLDChangedFlags into feature flag observer blocks. This is the base type for the typed ObjcLDChangedFlags passed into observer blocks. The client app will have to convert the ObjcLDChangedFlag into the expected typed ObjcLDChangedFlag type.
/// See the typed <code>ObjcLDClient</code> observeWithKey:owner:handler:, observeWithKeys:owner:handler:, and observeAllWithOwner:handler: for more details.
SWIFT_CLASS_NAMED("ObjcLDChangedFlag")
@interface LDChangedFlag : NSObject
/// The changed feature flag’s key
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// The value from before the flag change occurred.
@property (nonatomic, readonly, strong) LDValue * _Nonnull oldValue;
/// The value after the flag change occurred.
@property (nonatomic, readonly, strong) LDValue * _Nonnull newValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LDUser;
@class LDIntegerEvaluationDetail;
@class LDDoubleEvaluationDetail;
@class LDStringEvaluationDetail;
@class LDJSONEvaluationDetail;
@class LDConfig;

/// The LDClient is the heart of the SDK, providing client apps running iOS, watchOS, macOS, or tvOS access to LaunchDarkly services. This singleton provides the ability to set a configuration (LDConfig) that controls how the LDClient talks to LaunchDarkly servers, and a user (LDUser) that provides finer control on the feature flag values delivered to LDClient. Once the LDClient has started, it connects to LaunchDarkly’s servers to get the feature flag values you set in the Dashboard.
/// <h3>Objc Classes</h3>
/// The SDK creates an Objective-C native style API by wrapping Swift specific classes, properties, and methods into Objective-C wrapper classes prefixed by <code>Objc</code>. By defining Objective-C specific names, client apps written in Objective-C can use a native coding style, including using familiar LaunchDarkly SDK names like <code>LDClient</code>, <code>LDConfig</code>, and <code>LDUser</code>. Objective-C developers should refer to the Objc documentation by following the Objc specific links following type, property, and method names.
/// <h2>Usage</h2>
/// <h3>Startup</h3>
/// <ol>
///   <li>
///     To customize, configure a LDConfig (<code>ObjcLDConfig</code>) and LDUser (<code>ObjcLDUser</code>). Both give you additional control over the feature flags delivered to the LDClient. See <code>ObjcLDConfig</code> & <code>ObjcLDUser</code> for more details.
///   </li>
/// </ol>
/// <ul>
///   <li>
///     The mobileKey set into the <code>LDConfig</code> comes from your LaunchDarkly Account settings (on the left, at the bottom). If you have multiple projects be sure to choose the correct Mobile key.
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Call <code>[ObjcLDClient startWithConfig: user: completion:]</code> (<code>ObjcLDClient.startWithConfig(_:config:user:completion:)</code>)
///   </li>
/// </ol>
/// <ul>
///   <li>
///     If you do not pass in a LDUser, LDCLient will create a default for you.
///   </li>
///   <li>
///     The optional completion closure allows the LDClient to notify your app when it has gone online.
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Because the LDClient is a singleton, you do not have to keep a reference to it in your code.
///   </li>
/// </ol>
/// <h3>Getting Feature Flags</h3>
/// Once the LDClient has started, it makes your feature flags available using the <code>variation</code> and <code>variationDetail</code> methods. A <code>variation</code> is a specific flag value. For example, a boolean feature flag has 2 variations, <code>YES</code> and <code>NO</code>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// \code
/// BOOL boolFlag = [ldClientInstance boolVariationForKey:@"my-bool-flag" defaultValue:NO];
///
/// \endcodeIf you need to know more information about why a given value is returned, the typed <code>variationDetail</code> methods return an <code>LD<T>EvaluationDetail</code> with an detail about the evaluation.
/// \code
/// LDBoolEvaluationDetail *boolVariationDetail = [ldClientInstance boolVariationDetail:@"my-bool-flag" defaultValue:NO];
/// BOOL boolFlagValue = boolVariationDetail.value;
/// NSInteger boolFlagVariation = boolVariationDetail.variationIndex
/// NSDictionary boolFlagReason = boolVariationValue.reason;
///
/// \endcodeSee the typed <code>-[LDCLient variationForKey: defaultValue:]</code> or <code>-[LDClient variationDetailForKey: defaultValue:]</code> methods in the section <em>Feature Flag values</em> for details.
/// <h3>Observing Feature Flags</h3>
/// If you want to know when a feature flag value changes, you can check the flag’s value. You can also use one of several <code>observe</code> methods to have the LDClient notify you when a change occurs. There are several options– you can setup notifications based on when a specific flag changes, when any flag in a collection changes, or when a flag doesn’t change.
/// \code
/// __weak typeof(self) weakSelf = self;
/// [ldClientInstance observeBool:@"my-bool-flag" owner:self handler:^(LDBoolChangedFlag *changedFlag) {
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf updateFlagWithKey:@"my-bool-flag" changedFlag:changedFlag];
/// }];
///
/// \endcodeThe <code>changedFlag</code> passed in to the block contains the old and new value. See the typed <code>LDChangedFlag</code> classes in the <em>Obj-C Changed Flags</em>.
SWIFT_CLASS_NAMED("ObjcLDClient")
@interface LDClient : NSObject
/// Reports the online/offline state of the LDClient.
/// When online, the SDK communicates with LaunchDarkly servers for feature flag values and event reporting.
/// When offline, the SDK does not attempt to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers while offline. The SDK will collect events while offline.
/// Use <code>-[LDClient setOnline: completion:]</code> (<code>ObjcLDClient.setOnline(_:completion:)</code>) to change the online/offline state.
@property (nonatomic, readonly) BOOL isOnline;
/// Set the LDClient online/offline.
/// When online, the SDK communicates with LaunchDarkly servers for feature flag values and event reporting.
/// When offline, the SDK does not attempt to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers while offline. The SDK will collect events while offline.
/// The SDK protects itself from multiple rapid calls to <code>setOnline:YES</code> by enforcing an increasing delay (called <em>throttling</em>) each time <code>setOnline:YES</code> is called within a short time. The first time, the call proceeds normally. For each subsequent call the delay is enforced, and if waiting, increased to a maximum delay. When the delay has elapsed, the <code>setOnline:YES</code> will proceed, assuming that the client app has not called <code>setOnline:NO</code> during the delay. Therefore a call to <code>setOnline:YES</code> may not immediately result in the LDClient going online. Client app developers should consider this situation abnormal, and take steps to prevent the client app from making multiple rapid <code>setOnline:YES</code> calls. Calls to <code>setOnline:NO</code> are not throttled. After the delay, the SDK resets and the client app can make a susequent call to <code>setOnline:YES</code> without being throttled.
/// Use <code>isOnline</code> to get the online/offline state.
/// \param goOnline Desired online/offline mode for the LDClient
///
- (void)setOnline:(BOOL)goOnline;
/// Set the LDClient online/offline.
/// When online, the SDK communicates with LaunchDarkly servers for feature flag values and event reporting.
/// When offline, the SDK does not attempt to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers while offline. The SDK will collect events while offline.
/// The SDK protects itself from multiple rapid calls to <code>setOnline:YES</code> by enforcing an increasing delay (called <em>throttling</em>) each time <code>setOnline:YES</code> is called within a short time. The first time, the call proceeds normally. For each subsequent call the delay is enforced, and if waiting, increased to a maximum delay. When the delay has elapsed, the <code>setOnline:YES</code> will proceed, assuming that the client app has not called <code>setOnline:NO</code> during the delay. Therefore a call to <code>setOnline:YES</code> may not immediately result in the LDClient going online. Client app developers should consider this situation abnormal, and take steps to prevent the client app from making multiple rapid <code>setOnline:YES</code> calls. Calls to <code>setOnline:NO</code> are not throttled. Note that calls to <code>start(config: user: completion:)</code>, and setting the <code>config</code> or <code>user</code> can also call <code>setOnline:YES</code> under certain conditions. After the delay, the SDK resets and the client app can make a susequent call to <code>setOnline:YES</code> without being throttled.
/// Client apps can set a completion block called when the setOnline call completes. For unthrottled <code>setOnline:YES</code> and all <code>setOnline:NO</code> calls, the SDK will call the block immediately on completion of this method. For throttled <code>setOnline:YES</code> calls, the SDK will call the block after the throttling delay at the completion of the setOnline method.
/// Use <code>isOnline</code> (<code>ObjcLDClient.isOnline</code>)to get the online/offline state.
/// \param goOnline Desired online/offline mode for the LDClient
///
/// \param completion Completion block called when setOnline completes. (Optional)
///
- (void)setOnline:(BOOL)goOnline completion:(void (^ _Nullable)(void))completion;
/// Reports the initialization state of the LDClient.
/// When true, the SDK has either communicated with LaunchDarkly servers for feature flag values or the SDK has been set offline.
/// When false, the SDK has not been able to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers but flags might not exist or be stale.
@property (nonatomic, readonly) BOOL isInitialized;
/// The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code>LDUser</code> for details about what information can be retained.
/// The client app can change the current LDUser by calling this method. Client apps should follow <a href="apple.com/legal/privacy">Apple’s Privacy Policy</a> when collecting user information. When a new user is set, the LDClient goes offline and sets the new user. If the client was online when the new user was set, it goes online again, subject to a throttling delay if in force (see <code>setOnline(_: completion:)</code> for details).
/// \param user The ObjcLDUser set with the desired user.
///
- (void)identifyWithUser:(LDUser * _Nonnull)user;
/// The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code>LDUser</code> for details about what information can be retained.
/// Normally, the client app should create and set the LDUser and pass that into <code>start(config: user: completion:)</code>.
/// The client app can change the active <code>user</code> by calling identify with a new or updated LDUser. Client apps should follow <a href="apple.com/legal/privacy">Apple’s Privacy Policy</a> when collecting user information. If the client app does not create a LDUser, LDClient creates an anonymous default user, which can affect the feature flags delivered to the LDClient.
/// When a new user is set, the LDClient goes offline and sets the new user. If the client was online when the new user was set, it goes online again, subject to a throttling delay if in force (see <code>setOnline(_: completion:)</code> for details). To change both the <code>config</code> and <code>user</code>, set the LDClient offline, set both properties, then set the LDClient online. A completion may be passed to the identify method to allow a client app to know when fresh flag values for the new user are ready.
/// \param user The ObjcLDUser set with the desired user.
///
/// \param completion Closure called when the embedded <code>setOnlineIdentify</code> call completes, subject to throttling delays. (Optional)
///
- (void)identifyWithUser:(LDUser * _Nonnull)user completion:(void (^ _Nullable)(void))completion;
/// Stops the LDClient. Stopping the client means the LDClient goes offline and stops recording events. LDClient will no longer provide feature flag values, only returning default values.
/// There is almost no reason to stop the LDClient. Normally, set the LDClient offline to stop communication with the LaunchDarkly servers. Stop the LDClient to stop recording events. There is no need to stop the LDClient prior to suspending, moving to the background, or terminating the app. The SDK will respond to these events as the system requires and as configured in LDConfig.
- (void)close;
/// Returns an ObjcLDClient wrapper that contains the primary LDClient instance.
///
/// returns:
/// An ObjcLDClient.
+ (LDClient * _Nullable)get SWIFT_WARN_UNUSED_RESULT;
/// Returns an LDClient instance for a given environment.
/// \param environment The name of an environment provided in LDConfig.secondaryMobileKeys, defaults to <code>LDConfig.Constants.primaryEnvironmentName</code>, which is always associated with the <code>LDConfig.mobileKey</code> environment.
///
///
/// returns:
/// The requested LDClient instance.
+ (LDClient * _Nullable)getWithEnvironment:(NSString * _Nonnull)environment SWIFT_WARN_UNUSED_RESULT;
/// Returns the BOOL variation for the given feature flag. If the flag does not exist, cannot be cast to a BOOL, or the LDClient is not started, returns the default value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// A call to <code>boolVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// BOOL boolFeatureFlagValue = [ldClientInstance boolVariationForKey:@"my-bool-flag" defaultValue:NO];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested BOOL feature flag value, or the default value if the flag is missing or cannot be cast to a BOOL, or the client is not started
- (BOOL)boolVariationForKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://boolVariation">boolVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDBoolEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDBoolEvaluationDetail * _Nonnull)boolVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns the NSInteger variation for the given feature flag. If the flag does not exist, cannot be cast to a NSInteger, or the LDClient is not started, returns the default value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// A call to <code>integerVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// NSInteger integerFeatureFlagValue = [ldClientInstance integerVariationForKey:@"my-integer-flag" defaultValue:5];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested NSInteger feature flag value, or the default value if the flag is missing or cannot be cast to a NSInteger, or the client is not started
- (NSInteger)integerVariationForKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://integerVariation">integerVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDIntegerEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDIntegerEvaluationDetail * _Nonnull)integerVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns the double variation for the given feature flag. If the flag does not exist, cannot be cast to a double, or the LDClient is not started, returns the default value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// A call to <code>doubleVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// double doubleFeatureFlagValue = [ldClientInstance doubleVariationForKey:@"my-double-flag" defaultValue:2.71828];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested double feature flag value, or the default value if the flag is missing or cannot be cast to a double, or the client is not started
- (double)doubleVariationForKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://doubleVariation">doubleVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDDoubleEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDDoubleEvaluationDetail * _Nonnull)doubleVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns the NSString variation for the given feature flag. If the flag does not exist, cannot be cast to a NSString, or the LDClient is not started, returns the default value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// A call to <code>stringVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// NSString *stringFeatureFlagValue = [ldClientInstance stringVariationForKey:@"my-string-flag" defaultValue:@"<defaultValue>"];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested NSString feature flag value, or the default value if the flag is missing or cannot be cast to a NSString, or the client is not started.
- (NSString * _Nonnull)stringVariationForKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://stringVariation">stringVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDStringEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDStringEvaluationDetail * _Nonnull)stringVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns the JSON variation for the given feature flag. If the flag does not exist, or the LDClient is not started, returns the default value.
/// A call to <code>jsonVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// ObjcLDValue *featureFlagValue = [ldClientInstance jsonVariationForKey:@"my-flag" defaultValue:[LDValue ofBool:NO]];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested feature flag value, or the default value if the flag is missing or the client is not started
- (LDValue * _Nonnull)jsonVariationForKey:(NSString * _Nonnull)key defaultValue:(LDValue * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://arrayVariation">arrayVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDJSONEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDJSONEvaluationDetail * _Nonnull)jsonVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(LDValue * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns a dictionary with the flag keys and their values. If the LDClient is not started, returns nil.
/// The dictionary will not contain feature flags from the server with null values.
/// LDClient will not provide any source or change information, only flag keys and flag values. The client app should convert the feature flag value into the desired type.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable allFlags;
/// Sets a handler for the specified BOOL flag key executed on the specified owner. If the flag’s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values. See <code>ObjcLDBoolChangedFlag</code> for details.
/// The SDK retains only weak references to the owner, which allows the client app to freely destroy owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDBoolChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [ldClientInstance observeBool:"my-bool-flag" owner:self handler:^(LDBoolChangedFlag *changedFlag){
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf showBoolChangedFlag:changedFlag];
/// }];
///
/// \endcode\param key The LDFlagKey for the flag to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The block the SDK will execute when the feature flag changes.
///
- (void)observe:(NSString * _Nonnull)key owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(LDChangedFlag * _Nonnull))handler;
/// Sets a handler for the specified flag keys executed on the specified owner. If any observed flag’s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values. See LDChangedFlag (<code>ObjcLDChangedFlag</code>) for details.
/// The SDK retains only weak references to owner, which allows the client app to freely destroy change owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [ldClientInstance observeKeys:@[@"my-bool-flag",@"my-string-flag", @"my-dictionary-flag"] owner:self handler:^(NSDictionary<NSString *,LDChangedFlag *> * _Nonnull changedFlags) {
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    //There will be a typed LDChangedFlag entry in changedFlags for each changed flag. The block will only be called once regardless of how many flags changed.
///    [strongSelf showChangedFlags: changedFlags];
/// }];
///
/// \endcode\param keys An array of NSString* flag keys for the flags to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The LDFlagCollectionChangeHandler the SDK will execute 1 time when any of the observed feature flags change.
///
- (void)observeKeys:(NSArray<NSString *> * _Nonnull)keys owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(NSDictionary<NSString *, LDChangedFlag *> * _Nonnull))handler;
/// Sets a handler for all flag keys executed on the specified owner. If any flag’s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values. See LDChangedFlag (<code>ObjcLDChangedFlag</code>) for details.
/// The SDK retains only weak references to owner, which allows the client app to freely destroy change owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [ldClientInstance observeAllKeysWithOwner:self handler:^(NSDictionary<NSString *,LDChangedFlag *> * _Nonnull changedFlags) {
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    //There will be a typed LDChangedFlag entry in changedFlags for each changed flag. The block will only be called once regardless of how many flags changed.
///    [strongSelf showChangedFlags:changedFlags];
/// }];
///
/// \endcode\param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The LDFlagCollectionChangeHandler the SDK will execute 1 time when any of the observed feature flags change.
///
- (void)observeAllKeysWithOwner:(id _Nonnull)owner handler:(void (^ _Nonnull)(NSDictionary<NSString *, LDChangedFlag *> * _Nonnull))handler;
/// Sets a handler executed when a flag update leaves the flags unchanged from their previous values.
/// This handler can only ever be called when the LDClient is polling.
/// The SDK retains only weak references to owner, which allows the client app to freely destroy change owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [[LDClient sharedInstance] observeFlagsUnchangedWithOwner:self handler:^{
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    //do something after the flags were not updated. The block will be called once on the main thread if the client is polling and the poll did not change any flag values.
///    [self checkFeatureValues];
/// }];
///
/// \endcode\param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The LDFlagsUnchangedHandler the SDK will execute 1 time when a flag request completes with no flags changed.
///
- (void)observeFlagsUnchangedWithOwner:(id _Nonnull)owner handler:(void (^ _Nonnull)(void))handler;
/// Removes all observers for the given owner, including a flagsUnchangedObserver
/// The client app does not have to call this method. If the client app deinits a LDFlagChangeOwner, the SDK will automatically remove its handlers without ever calling them again.
/// \param owner The LDFlagChangeOwner owning the handlers to remove, whether a flag change handler or flags unchanged handler.
///
- (void)stopObservingForOwner:(id _Nonnull)owner;
/// Adds a custom event to the LDClient event store. A client app can set a tracking event to allow client customized data analysis. Once an app has called <code>track</code>, the app cannot remove the event from the event store.
/// LDClient periodically transmits events to LaunchDarkly based on the frequency set in LDConfig.eventFlushInterval. The LDClient must be started and online. Ths SDK stores events tracked while the LDClient is offline, but started.
/// Once the SDK’s event store is full, the SDK discards events until they can be reported to LaunchDarkly. Configure the size of the event store using <code>eventCapacity</code> on the <code>config</code>. See <code>LDConfig</code> (<code>ObjcLDConfig</code>) for details.
/// <h3>Usage</h3>
/// \code
/// [ldClientInstance trackWithKey:@"event-key" data:@{@"event-data-key":7}];
///
/// \endcode\param key The key for the event. The SDK does nothing with the key, which can be any string the client app sends
///
/// \param data The data for the event. The SDK does nothing with the data, which can be any valid JSON item the client app sends. (Optional)
///
/// \param error NSError object to hold the invalidJsonObject error if the data is not a valid JSON item. (Optional)
///
- (void)trackWithKey:(NSString * _Nonnull)key data:(LDValue * _Nullable)data;
/// See (track)[x-source-tag://track] for full documentation.
/// \param key The key for the event. The SDK does nothing with the key, which can be any string the client app sends
///
/// \param data The data for the event. The SDK does nothing with the data, which can be any valid JSON item the client app sends. (Optional)
///
/// \param metricValue A numeric value used by the LaunchDarkly experimentation feature in numeric custom metrics. Can be omitted if this event is used by only non-numeric metrics. This field will also be returned as part of the custom event for Data Export.
///
/// \param error NSError object to hold the invalidJsonObject error if the data is not a valid JSON item. (Optional)
///
- (void)trackWithKey:(NSString * _Nonnull)key data:(LDValue * _Nullable)data metricValue:(double)metricValue;
/// Tells the SDK to immediately send any currently queued events to LaunchDarkly.
/// There should not normally be a need to call this function. While online, the LDClient automatically reports events
/// on an interval defined by <code>LDConfig.eventFlushInterval</code>. Note that this function does not block until events are
/// sent, it only triggers a background task to send events immediately.
- (void)flush;
/// Tells the SDK to generate an alias event.
/// Associates two users for analytics purposes.
/// This can be helpful in the situation where a person is represented by multiple
/// LaunchDarkly users. This may happen, for example, when a person initially logs into
/// an application– the person might be represented by an anonymous user prior to logging
/// in and a different user after logging in, as denoted by a different user key.
/// \param context the user that will be aliased to
///
/// \param previousContext the user that will be bound to the new context
///
- (void)aliasWithContext:(LDUser * _Nonnull)context previousContext:(LDUser * _Nonnull)previousContext;
/// Starts the LDClient using the passed in <code>config</code> & <code>user</code>. Call this before requesting feature flag values. The LDClient will not go online until you call this method.
/// Starting the LDClient means setting the <code>config</code> & <code>user</code>, setting the client online if <code>config.startOnline</code> is true (the default setting), and starting event recording. The client app must start the LDClient before it will report feature flag values. If a client does not call <code>start</code>, no methods will work.
/// If the <code>start</code> call omits the <code>user</code>, the LDClient uses the default <code>user</code> if it was never set.
/// If the<code> start</code> call includes the optional <code>completion</code> closure, LDClient calls the <code>completion</code> closure when <code>setOnline(_: completion:)</code> embedded in the <code>init</code> method completes. This method listens for flag updates so the completion will only return once an update has occurred. The <code>start</code> call is subject to throttling delays, therefore the <code>completion</code> closure call may be delayed.
/// Subsequent calls to this method cause the LDClient to return. Normally there should only be one call to start. To change <code>user</code>, use <code>identify</code>.
/// \param configuration The LDConfig that contains the desired configuration. (Required)
///
/// \param user The LDUser set with the desired user. If omitted, LDClient sets a default user. (Optional)
///
/// \param completion Closure called when the embedded <code>setOnline</code> call completes. (Optional)
///
+ (void)startWithConfiguration:(LDConfig * _Nonnull)configuration user:(LDUser * _Nonnull)user completion:(void (^ _Nullable)(void))completion;
/// See <a href="x-source-tag://start">start</a> for more information on starting the SDK.
/// \param configuration The LDConfig that contains the desired configuration. (Required)
///
/// \param user The LDUser set with the desired user. If omitted, LDClient sets a default user.. (Optional)
///
/// \param startWaitSeconds A TimeInterval that determines when the completion will return if no flags have been returned from the network.
///
/// \param completion Closure called when the embedded <code>setOnline</code> call completes. Takes a Bool that indicates whether the completion timedout as a parameter. (Optional)
///
+ (void)startWithConfiguration:(LDConfig * _Nonnull)configuration user:(LDUser * _Nonnull)user startWaitSeconds:(NSTimeInterval)startWaitSeconds completion:(void (^ _Nullable)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// Use LDConfig to configure the LDClient. When initialized, a LDConfig contains the default values which can be changed as needed.
/// The client app can change the LDConfig by getting the <code>config</code> from LDClient (<code>ObjcLDClient</code>), adjusting the values, and setting it back into the LDClient (<code>ObjcLDClient</code>).
SWIFT_CLASS_NAMED("ObjcLDConfig")
@interface LDConfig : NSObject
/// The Mobile key from your <a href="app.launchdarkly.com">LaunchDarkly Account</a> settings (on the left at the bottom). If you have multiple projects be sure to choose the correct Mobile key.
@property (nonatomic, copy) NSString * _Nonnull mobileKey;
/// The url for making feature flag requests. Do not change unless instructed by LaunchDarkly.
@property (nonatomic, copy) NSURL * _Nonnull baseUrl;
/// The url for making event reports. Do not change unless instructed by LaunchDarkly.
@property (nonatomic, copy) NSURL * _Nonnull eventsUrl;
/// The url for connecting to the <em>clientstream</em>. Do not change unless instructed by LaunchDarkly.
@property (nonatomic, copy) NSURL * _Nonnull streamUrl;
/// The maximum number of analytics events the LDClient can store. When the LDClient event store reaches the eventCapacity, the SDK discards events until it successfully reports them to LaunchDarkly. (Default: 100)
@property (nonatomic) NSInteger eventCapacity;
/// The timeout interval for flag requests and event reports. (Default: 10 seconds)
@property (nonatomic) NSTimeInterval connectionTimeout;
/// The time interval between event reports (Default: 30 seconds)
@property (nonatomic) NSTimeInterval eventFlushInterval;
/// The interval between feature flag requests. Used only for polling mode. (Default: 5 minutes)
@property (nonatomic) NSTimeInterval flagPollingInterval;
/// The interval between feature flag requests while running in the background. Used only for polling mode. (Default: 60 minutes)
@property (nonatomic) NSTimeInterval backgroundFlagPollingInterval;
/// The minimum interval between feature flag requests. Used only for polling mode. (5 minutes)
@property (nonatomic, readonly) NSTimeInterval minFlagPollingInterval;
/// The minimum interval between feature flag requests while running in the background. Used only for polling mode. (15 minutes)
@property (nonatomic, readonly) NSTimeInterval minBackgroundFlagPollInterval;
/// Controls the method the SDK uses to keep feature flags updated. When set to .streaming, connects to <code>clientstream</code> which notifies the SDK of feature flag changes. When set to .polling, an efficient polling mechanism is used to periodically request feature flag values. Ignored for watchOS, which always uses .polling. See <code>LDStreamingMode</code> for more details. (Default: .streaming)
@property (nonatomic) BOOL streamingMode;
/// Enables feature flag updates when your app is in the background. Allowed on macOS only. (Default: NO)
@property (nonatomic) BOOL enableBackgroundUpdates;
/// Controls LDClient start behavior. When YES, calling start causes LDClient to go online. When NO, calling start causes LDClient to remain offline. If offline at start, set the client online to receive flag updates. (Default: YES)
@property (nonatomic) BOOL startOnline;
/// Treat all user attributes as private for event reporting for all users.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// When YES, ignores values in either LDConfig.privateUserAttributes or LDUser.privateAttributes. (Default: NO)
/// See Also: <code>privateUserAttributes</code> and <code>LDUser.privateAttributes</code> (<code>ObjcLDUser.privateAttributes</code>)
@property (nonatomic) BOOL allUserAttributesPrivate;
/// User attributes and top level custom dictionary keys to treat as private for event reporting for all users.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// To set private user attributes for a specific user, see <code>LDUser.privateAttributes</code> (<code>ObjcLDUser.privateAttributes</code>). (Default: <code>[]</code>)
/// See Also: <code>allUserAttributesPrivate</code> and <code>LDUser.privateAttributes</code> (<code>ObjcLDUser.privateAttributes</code>).
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull privateUserAttributes;
/// Directs the SDK to use REPORT for HTTP requests to connect to <code>clientstream</code> and make feature flag requests. When NO the SDK uses GET for these requests. Do not use unless advised by LaunchDarkly. (Default: NO)
@property (nonatomic) BOOL useReport;
/// Controls how the SDK reports the user in analytics event reports. When set to YES, event reports will contain the user attributes, except attributes marked as private. When set to NO, event reports will contain the user’s key only, reducing the size of event reports. (Default: NO)
@property (nonatomic) BOOL inlineUserInEvents;
/// Enables logging for debugging. (Default: NO)
@property (nonatomic) BOOL debugMode;
/// Enables requesting evaluation reasons for all flags. (Default: NO)
@property (nonatomic) BOOL evaluationReasons;
/// An Integer that tells UserEnvironmentFlagCache the maximum number of users to locally cache. Can be set to -1 for unlimited cached users. (Default: 5)
@property (nonatomic) NSInteger maxCachedUsers;
/// Set to true to opt out of sending diagnostic data. (Default: false)
/// Unless the diagnosticOptOut field is set to true, the client will send some diagnostics data to the LaunchDarkly servers in order to assist in the development of future SDK improvements. These diagnostics consist of an initial payload containing some details of the SDK in use, the SDK’s configuration, and the platform the SDK is being run on; as well as payloads sent periodically with information on irregular occurrences such as dropped events.
@property (nonatomic) BOOL diagnosticOptOut;
/// The interval between sending periodic diagnostic data. (Default: 15 minutes)
@property (nonatomic) NSTimeInterval diagnosticRecordingInterval;
/// For use by wrapper libraries to set an identifying name for the wrapper being used. This will be sent in the “X-LaunchDarkly-Wrapper” header on requests to the LaunchDarkly servers to allow recording metrics on the usage of these wrapper libraries.
@property (nonatomic, copy) NSString * _Nullable wrapperName;
/// For use by wrapper libraries to report the version of the library in use. If the <code>wrapperName</code> has not been set this field will be ignored. Otherwise the verison strill will be included with the <code>wrapperName</code> in the “X-LaunchDarkly-Wrapper” header on requests to the LaunchDarkly servers.
@property (nonatomic, copy) NSString * _Nullable wrapperVersion;
/// Returns a Dictionary of identifying names to unique mobile keys to access secondary environments.
///
/// returns:
/// A Dictionary of String to String.
- (NSDictionary<NSString *, NSString *> * _Nonnull)getSecondaryMobileKeys SWIFT_WARN_UNUSED_RESULT;
/// Sets a Dictionary of identifying names to unique mobile keys to access secondary environments in the LDConfig. Throws if you try to add duplicate keys or put the primary key or name in secondaryMobileKeys.
/// \param keys A Dictionary of String to String.
///
- (BOOL)setSecondaryMobileKeys:(NSDictionary<NSString *, NSString *> * _Nonnull)keys error:(NSError * _Nullable * _Nullable)error;
/// LDConfig constructor. Configurable values are all set to their default values. The client app can modify these values as desired. Note that client app developers may prefer to get the LDConfig from <code>LDClient.config</code> (<code>ObjcLDClient.config</code>) in order to retain previously set values.
- (nonnull instancetype)initWithMobileKey:(NSString * _Nonnull)mobileKey OBJC_DESIGNATED_INITIALIZER;
/// Compares the settable properties in 2 LDConfig structs
- (BOOL)isEqualWithObject:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Structure that contains the evaluation result and additional information when evaluating a flag as a double.
SWIFT_CLASS_NAMED("ObjcLDDoubleEvaluationDetail")
@interface LDDoubleEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly) double value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Structure that contains the evaluation result and additional information when evaluating a flag as an integer.
SWIFT_CLASS_NAMED("ObjcLDIntegerEvaluationDetail")
@interface LDIntegerEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly) NSInteger value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Structure that contains the evaluation result and additional information when evaluating a flag as a JSON value.
SWIFT_CLASS_NAMED("ObjcLDJSONEvaluationDetail")
@interface LDJSONEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly, strong) LDValue * _Nonnull value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Structure that contains the evaluation result and additional information when evaluating a flag as a string.
SWIFT_CLASS_NAMED("ObjcLDStringEvaluationDetail")
@interface LDStringEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly, copy) NSString * _Nullable value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// LDUser allows clients to collect information about users in order to refine the feature flag values sent to the SDK. For example, the client app may launch with the SDK defined anonymous user. As the user works with the client app, information may be collected as needed and sent to LaunchDarkly. The client app controls the information collected, which LaunchDarkly does not use except as the client directs to refine feature flags. Client apps should follow <a href="apple.com/legal/privacy">Apple’s Privacy Policy</a> when collecting user information.
/// The SDK caches last known feature flags for use on app startup to provide continuity with the last app run. Provided the LDClient is online and can establish a connection with LaunchDarkly servers, cached information will only be used a very short time. Once the latest feature flags arrive at the SDK, the SDK no longer uses cached feature flags. The SDK retains feature flags on the last 5 client defined users. The SDK will retain feature flags until they are overwritten by a different user’s feature flags, or until the user removes the app from the device.
/// The SDK does not cache user information collected, except for the user key. The user key is used to identify the cached feature flags for that user. Client app developers should use caution not to use sensitive user information as the user-key.
SWIFT_CLASS_NAMED("ObjcLDUser")
@interface LDUser : NSObject
/// LDUser secondary attribute used to make <code>secondary</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeSecondary;)
+ (NSString * _Nonnull)attributeSecondary SWIFT_WARN_UNUSED_RESULT;
/// LDUser name attribute used to make <code>name</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeName;)
+ (NSString * _Nonnull)attributeName SWIFT_WARN_UNUSED_RESULT;
/// LDUser firstName attribute used to make <code>firstName</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeFirstName;)
+ (NSString * _Nonnull)attributeFirstName SWIFT_WARN_UNUSED_RESULT;
/// LDUser lastName attribute used to make <code>lastName</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeLastName;)
+ (NSString * _Nonnull)attributeLastName SWIFT_WARN_UNUSED_RESULT;
/// LDUser country attribute used to make <code>country</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeCountry;)
+ (NSString * _Nonnull)attributeCountry SWIFT_WARN_UNUSED_RESULT;
/// LDUser ipAddress attribute used to make <code>ipAddress</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeIPAddress;)
+ (NSString * _Nonnull)attributeIPAddress SWIFT_WARN_UNUSED_RESULT;
/// LDUser email attribute used to make <code>email</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeEmail;)
+ (NSString * _Nonnull)attributeEmail SWIFT_WARN_UNUSED_RESULT;
/// LDUser avatar attribute used to make <code>avatar</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeAvatar;)
+ (NSString * _Nonnull)attributeAvatar SWIFT_WARN_UNUSED_RESULT;
/// Client app defined string that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user. The key cannot be made private.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// The secondary key for the user. See the <a href="https://docs.launchdarkly.com/home/flags/targeting-users#percentage-rollouts">documentation</a> for more information on it’s use for percentage rollout bucketing.
@property (nonatomic, copy) NSString * _Nullable secondary;
/// Client app defined name for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable name;
/// Client app defined first name for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable firstName;
/// Client app defined last name for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable lastName;
/// Client app defined country for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable country;
/// Client app defined ipAddress for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable ipAddress;
/// Client app defined email address for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable email;
/// Client app defined avatar for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable avatar;
/// Client app defined dictionary for the user. The client app may declare top level dictionary items as private. See <code>privateAttributes</code> for details.
@property (nonatomic, copy) NSDictionary<NSString *, LDValue *> * _Nonnull custom;
/// Client app defined isAnonymous for the user. If the client app does not define isAnonymous, the SDK will use the <code>key</code> to set this attribute. isAnonymous cannot be made private. (Default: YES)
@property (nonatomic) BOOL isAnonymous;
/// Client app defined privateAttributes for the user.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// This attribute is ignored if <code>ObjcLDConfig.allUserAttributesPrivate</code> is YES. Combined with <code>ObjcLDConfig.privateUserAttributes</code>. The SDK considers attributes appearing in either list as private. Client apps may define most built-in attributes and all top level <code>custom</code> dictionary keys here. (Default: <code>[]</code>])
/// See Also: <code>ObjcLDConfig.allUserAttributesPrivate</code> and <code>ObjcLDConfig.privateUserAttributes</code>.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull privateAttributes;
/// Initializer to create a LDUser. Client configurable attributes are set to their default value. The SDK will automatically set <code>key</code>, <code>device</code>, <code>operatingSystem</code>, and <code>isAnonymous</code> attributes. The SDK embeds <code>device</code> and <code>operatingSystem</code> into the <code>custom</code> dictionary for transmission to LaunchDarkly.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer to create a LDUser with a specific key. Other client configurable attributes are set to their default value. The SDK will automatically set <code>key</code>, <code>device</code>, <code>operatingSystem</code>, and <code>isAnonymous</code> attributes. The SDK embeds <code>device</code> and <code>operatingSystem</code> into the <code>custom</code> dictionary for transmission to LaunchDarkly.
/// \param key String that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user.
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key OBJC_DESIGNATED_INITIALIZER;
/// Compares users by comparing their user keys only, to allow the client app to collect user information over time
- (BOOL)isEqualWithObject:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;
enum LDValueType : NSInteger;

/// Bridged <code>LDValue</code> type for Objective-C.
/// Can create instances from Objective-C with the provided <code>of</code> static functions, for example <code>[LDValue ofBool:YES]</code>.
SWIFT_CLASS_NAMED("ObjcLDValue")
@interface LDValue : NSObject
/// Create a new <code>LDValue</code> that represents a JSON null.
+ (LDValue * _Nonnull)ofNull SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> from a boolean value.
+ (LDValue * _Nonnull)ofBool:(BOOL)bool_ SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> from a numeric value.
+ (LDValue * _Nonnull)ofNumber:(NSNumber * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> from a string value.
+ (LDValue * _Nonnull)ofString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> from an array of values.
+ (LDValue * _Nonnull)ofArray:(NSArray<LDValue *> * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> object from dictionary of values.
+ (LDValue * _Nonnull)ofDict:(NSDictionary<NSString *, LDValue *> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
/// Get the type of the value.
- (enum LDValueType)getType SWIFT_WARN_UNUSED_RESULT;
/// Get the value as a <code>Bool</code>.
///
/// returns:
/// The contained boolean value or <code>NO</code> if the value is not a boolean.
- (BOOL)boolValue SWIFT_WARN_UNUSED_RESULT;
/// Get the value as a <code>Double</code>.
///
/// returns:
/// The contained double value or <code>0.0</code> if the value is not a number.
- (double)doubleValue SWIFT_WARN_UNUSED_RESULT;
/// Get the value as a <code>String</code>.
///
/// returns:
/// The contained string value or the empty string if the value is not a string.
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Get the value as an array.
///
/// returns:
/// An array of the contained values, or the empty array if the value is not an array.
- (NSArray<LDValue *> * _Nonnull)arrayValue SWIFT_WARN_UNUSED_RESULT;
/// Get the value as a dictionary representing the JSON object
///
/// returns:
/// A dictionary representing the JSON object, or the empty dictionary if the value is not a dictionary.
- (NSDictionary<NSString *, LDValue *> * _Nonnull)dictValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Used to represent the type of an <code>LDValue</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, LDValueType, "ObjcLDValueType", closed) {
/// The value returned by <code>LDValue.getType()</code> when the represented value is a null.
  LDValueTypeNull = 0,
/// The value returned by <code>LDValue.getType()</code> when the represented value is a boolean.
  LDValueTypeBool = 1,
/// The value returned by <code>LDValue.getType()</code> when the represented value is a number.
  LDValueTypeNumber = 2,
/// The value returned by <code>LDValue.getType()</code> when the represented value is a string.
  LDValueTypeString = 3,
/// The value returned by <code>LDValue.getType()</code> when the represented value is an array.
  LDValueTypeArray = 4,
/// The value returned by <code>LDValue.getType()</code> when the represented value is an object.
  LDValueTypeObject = 5,
};





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef LAUNCHDARKLY_TVOS_SWIFT_H
#define LAUNCHDARKLY_TVOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LaunchDarkly_tvOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





/// An error thrown from APIs when an invalid argument is provided.
SWIFT_CLASS("_TtC17LaunchDarkly_tvOS22LDInvalidArgumentError")
@interface LDInvalidArgumentError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class providing ObjC interoperability with the LDUser struct
SWIFT_CLASS("_TtC17LaunchDarkly_tvOS13LDUserWrapper")
@interface LDUserWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class LDValue;

/// Structure that contains the evaluation result and additional information when evaluating a flag as a boolean.
SWIFT_CLASS_NAMED("ObjcLDBoolEvaluationDetail")
@interface LDBoolEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly) BOOL value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Collects the elements of a feature flag that changed as a result of a <code>clientstream</code> update or feature flag request. The SDK will pass a typed ObjcLDChangedFlag or a collection of ObjcLDChangedFlags into feature flag observer blocks. This is the base type for the typed ObjcLDChangedFlags passed into observer blocks. The client app will have to convert the ObjcLDChangedFlag into the expected typed ObjcLDChangedFlag type.
/// See the typed <code>ObjcLDClient</code> observeWithKey:owner:handler:, observeWithKeys:owner:handler:, and observeAllWithOwner:handler: for more details.
SWIFT_CLASS_NAMED("ObjcLDChangedFlag")
@interface LDChangedFlag : NSObject
/// The changed feature flag’s key
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// The value from before the flag change occurred.
@property (nonatomic, readonly, strong) LDValue * _Nonnull oldValue;
/// The value after the flag change occurred.
@property (nonatomic, readonly, strong) LDValue * _Nonnull newValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LDUser;
@class LDIntegerEvaluationDetail;
@class LDDoubleEvaluationDetail;
@class LDStringEvaluationDetail;
@class LDJSONEvaluationDetail;
@class LDConfig;

/// The LDClient is the heart of the SDK, providing client apps running iOS, watchOS, macOS, or tvOS access to LaunchDarkly services. This singleton provides the ability to set a configuration (LDConfig) that controls how the LDClient talks to LaunchDarkly servers, and a user (LDUser) that provides finer control on the feature flag values delivered to LDClient. Once the LDClient has started, it connects to LaunchDarkly’s servers to get the feature flag values you set in the Dashboard.
/// <h3>Objc Classes</h3>
/// The SDK creates an Objective-C native style API by wrapping Swift specific classes, properties, and methods into Objective-C wrapper classes prefixed by <code>Objc</code>. By defining Objective-C specific names, client apps written in Objective-C can use a native coding style, including using familiar LaunchDarkly SDK names like <code>LDClient</code>, <code>LDConfig</code>, and <code>LDUser</code>. Objective-C developers should refer to the Objc documentation by following the Objc specific links following type, property, and method names.
/// <h2>Usage</h2>
/// <h3>Startup</h3>
/// <ol>
///   <li>
///     To customize, configure a LDConfig (<code>ObjcLDConfig</code>) and LDUser (<code>ObjcLDUser</code>). Both give you additional control over the feature flags delivered to the LDClient. See <code>ObjcLDConfig</code> & <code>ObjcLDUser</code> for more details.
///   </li>
/// </ol>
/// <ul>
///   <li>
///     The mobileKey set into the <code>LDConfig</code> comes from your LaunchDarkly Account settings (on the left, at the bottom). If you have multiple projects be sure to choose the correct Mobile key.
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Call <code>[ObjcLDClient startWithConfig: user: completion:]</code> (<code>ObjcLDClient.startWithConfig(_:config:user:completion:)</code>)
///   </li>
/// </ol>
/// <ul>
///   <li>
///     If you do not pass in a LDUser, LDCLient will create a default for you.
///   </li>
///   <li>
///     The optional completion closure allows the LDClient to notify your app when it has gone online.
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Because the LDClient is a singleton, you do not have to keep a reference to it in your code.
///   </li>
/// </ol>
/// <h3>Getting Feature Flags</h3>
/// Once the LDClient has started, it makes your feature flags available using the <code>variation</code> and <code>variationDetail</code> methods. A <code>variation</code> is a specific flag value. For example, a boolean feature flag has 2 variations, <code>YES</code> and <code>NO</code>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// \code
/// BOOL boolFlag = [ldClientInstance boolVariationForKey:@"my-bool-flag" defaultValue:NO];
///
/// \endcodeIf you need to know more information about why a given value is returned, the typed <code>variationDetail</code> methods return an <code>LD<T>EvaluationDetail</code> with an detail about the evaluation.
/// \code
/// LDBoolEvaluationDetail *boolVariationDetail = [ldClientInstance boolVariationDetail:@"my-bool-flag" defaultValue:NO];
/// BOOL boolFlagValue = boolVariationDetail.value;
/// NSInteger boolFlagVariation = boolVariationDetail.variationIndex
/// NSDictionary boolFlagReason = boolVariationValue.reason;
///
/// \endcodeSee the typed <code>-[LDCLient variationForKey: defaultValue:]</code> or <code>-[LDClient variationDetailForKey: defaultValue:]</code> methods in the section <em>Feature Flag values</em> for details.
/// <h3>Observing Feature Flags</h3>
/// If you want to know when a feature flag value changes, you can check the flag’s value. You can also use one of several <code>observe</code> methods to have the LDClient notify you when a change occurs. There are several options– you can setup notifications based on when a specific flag changes, when any flag in a collection changes, or when a flag doesn’t change.
/// \code
/// __weak typeof(self) weakSelf = self;
/// [ldClientInstance observeBool:@"my-bool-flag" owner:self handler:^(LDBoolChangedFlag *changedFlag) {
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf updateFlagWithKey:@"my-bool-flag" changedFlag:changedFlag];
/// }];
///
/// \endcodeThe <code>changedFlag</code> passed in to the block contains the old and new value. See the typed <code>LDChangedFlag</code> classes in the <em>Obj-C Changed Flags</em>.
SWIFT_CLASS_NAMED("ObjcLDClient")
@interface LDClient : NSObject
/// Reports the online/offline state of the LDClient.
/// When online, the SDK communicates with LaunchDarkly servers for feature flag values and event reporting.
/// When offline, the SDK does not attempt to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers while offline. The SDK will collect events while offline.
/// Use <code>-[LDClient setOnline: completion:]</code> (<code>ObjcLDClient.setOnline(_:completion:)</code>) to change the online/offline state.
@property (nonatomic, readonly) BOOL isOnline;
/// Set the LDClient online/offline.
/// When online, the SDK communicates with LaunchDarkly servers for feature flag values and event reporting.
/// When offline, the SDK does not attempt to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers while offline. The SDK will collect events while offline.
/// The SDK protects itself from multiple rapid calls to <code>setOnline:YES</code> by enforcing an increasing delay (called <em>throttling</em>) each time <code>setOnline:YES</code> is called within a short time. The first time, the call proceeds normally. For each subsequent call the delay is enforced, and if waiting, increased to a maximum delay. When the delay has elapsed, the <code>setOnline:YES</code> will proceed, assuming that the client app has not called <code>setOnline:NO</code> during the delay. Therefore a call to <code>setOnline:YES</code> may not immediately result in the LDClient going online. Client app developers should consider this situation abnormal, and take steps to prevent the client app from making multiple rapid <code>setOnline:YES</code> calls. Calls to <code>setOnline:NO</code> are not throttled. After the delay, the SDK resets and the client app can make a susequent call to <code>setOnline:YES</code> without being throttled.
/// Use <code>isOnline</code> to get the online/offline state.
/// \param goOnline Desired online/offline mode for the LDClient
///
- (void)setOnline:(BOOL)goOnline;
/// Set the LDClient online/offline.
/// When online, the SDK communicates with LaunchDarkly servers for feature flag values and event reporting.
/// When offline, the SDK does not attempt to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers while offline. The SDK will collect events while offline.
/// The SDK protects itself from multiple rapid calls to <code>setOnline:YES</code> by enforcing an increasing delay (called <em>throttling</em>) each time <code>setOnline:YES</code> is called within a short time. The first time, the call proceeds normally. For each subsequent call the delay is enforced, and if waiting, increased to a maximum delay. When the delay has elapsed, the <code>setOnline:YES</code> will proceed, assuming that the client app has not called <code>setOnline:NO</code> during the delay. Therefore a call to <code>setOnline:YES</code> may not immediately result in the LDClient going online. Client app developers should consider this situation abnormal, and take steps to prevent the client app from making multiple rapid <code>setOnline:YES</code> calls. Calls to <code>setOnline:NO</code> are not throttled. Note that calls to <code>start(config: user: completion:)</code>, and setting the <code>config</code> or <code>user</code> can also call <code>setOnline:YES</code> under certain conditions. After the delay, the SDK resets and the client app can make a susequent call to <code>setOnline:YES</code> without being throttled.
/// Client apps can set a completion block called when the setOnline call completes. For unthrottled <code>setOnline:YES</code> and all <code>setOnline:NO</code> calls, the SDK will call the block immediately on completion of this method. For throttled <code>setOnline:YES</code> calls, the SDK will call the block after the throttling delay at the completion of the setOnline method.
/// Use <code>isOnline</code> (<code>ObjcLDClient.isOnline</code>)to get the online/offline state.
/// \param goOnline Desired online/offline mode for the LDClient
///
/// \param completion Completion block called when setOnline completes. (Optional)
///
- (void)setOnline:(BOOL)goOnline completion:(void (^ _Nullable)(void))completion;
/// Reports the initialization state of the LDClient.
/// When true, the SDK has either communicated with LaunchDarkly servers for feature flag values or the SDK has been set offline.
/// When false, the SDK has not been able to communicate with LaunchDarkly servers. Client apps can request feature flag values and set/change feature flag observers but flags might not exist or be stale.
@property (nonatomic, readonly) BOOL isInitialized;
/// The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code>LDUser</code> for details about what information can be retained.
/// The client app can change the current LDUser by calling this method. Client apps should follow <a href="apple.com/legal/privacy">Apple’s Privacy Policy</a> when collecting user information. When a new user is set, the LDClient goes offline and sets the new user. If the client was online when the new user was set, it goes online again, subject to a throttling delay if in force (see <code>setOnline(_: completion:)</code> for details).
/// \param user The ObjcLDUser set with the desired user.
///
- (void)identifyWithUser:(LDUser * _Nonnull)user;
/// The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code>LDUser</code> for details about what information can be retained.
/// Normally, the client app should create and set the LDUser and pass that into <code>start(config: user: completion:)</code>.
/// The client app can change the active <code>user</code> by calling identify with a new or updated LDUser. Client apps should follow <a href="apple.com/legal/privacy">Apple’s Privacy Policy</a> when collecting user information. If the client app does not create a LDUser, LDClient creates an anonymous default user, which can affect the feature flags delivered to the LDClient.
/// When a new user is set, the LDClient goes offline and sets the new user. If the client was online when the new user was set, it goes online again, subject to a throttling delay if in force (see <code>setOnline(_: completion:)</code> for details). To change both the <code>config</code> and <code>user</code>, set the LDClient offline, set both properties, then set the LDClient online. A completion may be passed to the identify method to allow a client app to know when fresh flag values for the new user are ready.
/// \param user The ObjcLDUser set with the desired user.
///
/// \param completion Closure called when the embedded <code>setOnlineIdentify</code> call completes, subject to throttling delays. (Optional)
///
- (void)identifyWithUser:(LDUser * _Nonnull)user completion:(void (^ _Nullable)(void))completion;
/// Stops the LDClient. Stopping the client means the LDClient goes offline and stops recording events. LDClient will no longer provide feature flag values, only returning default values.
/// There is almost no reason to stop the LDClient. Normally, set the LDClient offline to stop communication with the LaunchDarkly servers. Stop the LDClient to stop recording events. There is no need to stop the LDClient prior to suspending, moving to the background, or terminating the app. The SDK will respond to these events as the system requires and as configured in LDConfig.
- (void)close;
/// Returns an ObjcLDClient wrapper that contains the primary LDClient instance.
///
/// returns:
/// An ObjcLDClient.
+ (LDClient * _Nullable)get SWIFT_WARN_UNUSED_RESULT;
/// Returns an LDClient instance for a given environment.
/// \param environment The name of an environment provided in LDConfig.secondaryMobileKeys, defaults to <code>LDConfig.Constants.primaryEnvironmentName</code>, which is always associated with the <code>LDConfig.mobileKey</code> environment.
///
///
/// returns:
/// The requested LDClient instance.
+ (LDClient * _Nullable)getWithEnvironment:(NSString * _Nonnull)environment SWIFT_WARN_UNUSED_RESULT;
/// Returns the BOOL variation for the given feature flag. If the flag does not exist, cannot be cast to a BOOL, or the LDClient is not started, returns the default value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// A call to <code>boolVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// BOOL boolFeatureFlagValue = [ldClientInstance boolVariationForKey:@"my-bool-flag" defaultValue:NO];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested BOOL feature flag value, or the default value if the flag is missing or cannot be cast to a BOOL, or the client is not started
- (BOOL)boolVariationForKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://boolVariation">boolVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDBoolEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDBoolEvaluationDetail * _Nonnull)boolVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns the NSInteger variation for the given feature flag. If the flag does not exist, cannot be cast to a NSInteger, or the LDClient is not started, returns the default value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// A call to <code>integerVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// NSInteger integerFeatureFlagValue = [ldClientInstance integerVariationForKey:@"my-integer-flag" defaultValue:5];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested NSInteger feature flag value, or the default value if the flag is missing or cannot be cast to a NSInteger, or the client is not started
- (NSInteger)integerVariationForKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://integerVariation">integerVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDIntegerEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDIntegerEvaluationDetail * _Nonnull)integerVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns the double variation for the given feature flag. If the flag does not exist, cannot be cast to a double, or the LDClient is not started, returns the default value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// A call to <code>doubleVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// double doubleFeatureFlagValue = [ldClientInstance doubleVariationForKey:@"my-double-flag" defaultValue:2.71828];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested double feature flag value, or the default value if the flag is missing or cannot be cast to a double, or the client is not started
- (double)doubleVariationForKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://doubleVariation">doubleVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDDoubleEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDDoubleEvaluationDetail * _Nonnull)doubleVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns the NSString variation for the given feature flag. If the flag does not exist, cannot be cast to a NSString, or the LDClient is not started, returns the default value.
/// A <em>variation</em> is a specific flag value. For example a boolean feature flag has 2 variations, <em>YES</em> and <em>NO</em>. You can create feature flags with more than 2 variations using other feature flag types. See <code>LDValue</code> for the available types.
/// A call to <code>stringVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// NSString *stringFeatureFlagValue = [ldClientInstance stringVariationForKey:@"my-string-flag" defaultValue:@"<defaultValue>"];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested NSString feature flag value, or the default value if the flag is missing or cannot be cast to a NSString, or the client is not started.
- (NSString * _Nonnull)stringVariationForKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://stringVariation">stringVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDStringEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDStringEvaluationDetail * _Nonnull)stringVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns the JSON variation for the given feature flag. If the flag does not exist, or the LDClient is not started, returns the default value.
/// A call to <code>jsonVariation</code> records events reported later. Recorded events allow clients to analyze usage and assist in debugging issues.
/// <h3>Usage</h3>
/// \code
/// ObjcLDValue *featureFlagValue = [ldClientInstance jsonVariationForKey:@"my-flag" defaultValue:[LDValue ofBool:NO]];
///
/// \endcode\param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// The requested feature flag value, or the default value if the flag is missing or the client is not started
- (LDValue * _Nonnull)jsonVariationForKey:(NSString * _Nonnull)key defaultValue:(LDValue * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// See <a href="x-source-tag://arrayVariation">arrayVariation</a> for more information on variation methods.
/// \param key The LDFlagKey for the requested feature flag.
///
/// \param defaultValue The default value to return if the feature flag key does not exist.
///
///
/// returns:
/// ObjcLDJSONEvaluationDetail containing your value as well as useful information on why that value was returned.
- (LDJSONEvaluationDetail * _Nonnull)jsonVariationDetailForKey:(NSString * _Nonnull)key defaultValue:(LDValue * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns a dictionary with the flag keys and their values. If the LDClient is not started, returns nil.
/// The dictionary will not contain feature flags from the server with null values.
/// LDClient will not provide any source or change information, only flag keys and flag values. The client app should convert the feature flag value into the desired type.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable allFlags;
/// Sets a handler for the specified BOOL flag key executed on the specified owner. If the flag’s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values. See <code>ObjcLDBoolChangedFlag</code> for details.
/// The SDK retains only weak references to the owner, which allows the client app to freely destroy owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDBoolChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [ldClientInstance observeBool:"my-bool-flag" owner:self handler:^(LDBoolChangedFlag *changedFlag){
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    [strongSelf showBoolChangedFlag:changedFlag];
/// }];
///
/// \endcode\param key The LDFlagKey for the flag to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The block the SDK will execute when the feature flag changes.
///
- (void)observe:(NSString * _Nonnull)key owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(LDChangedFlag * _Nonnull))handler;
/// Sets a handler for the specified flag keys executed on the specified owner. If any observed flag’s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values. See LDChangedFlag (<code>ObjcLDChangedFlag</code>) for details.
/// The SDK retains only weak references to owner, which allows the client app to freely destroy change owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [ldClientInstance observeKeys:@[@"my-bool-flag",@"my-string-flag", @"my-dictionary-flag"] owner:self handler:^(NSDictionary<NSString *,LDChangedFlag *> * _Nonnull changedFlags) {
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    //There will be a typed LDChangedFlag entry in changedFlags for each changed flag. The block will only be called once regardless of how many flags changed.
///    [strongSelf showChangedFlags: changedFlags];
/// }];
///
/// \endcode\param keys An array of NSString* flag keys for the flags to observe.
///
/// \param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The LDFlagCollectionChangeHandler the SDK will execute 1 time when any of the observed feature flags change.
///
- (void)observeKeys:(NSArray<NSString *> * _Nonnull)keys owner:(id _Nonnull)owner handler:(void (^ _Nonnull)(NSDictionary<NSString *, LDChangedFlag *> * _Nonnull))handler;
/// Sets a handler for all flag keys executed on the specified owner. If any flag’s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values. See LDChangedFlag (<code>ObjcLDChangedFlag</code>) for details.
/// The SDK retains only weak references to owner, which allows the client app to freely destroy change owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>ObjcLDChangedFlag</code> and <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [ldClientInstance observeAllKeysWithOwner:self handler:^(NSDictionary<NSString *,LDChangedFlag *> * _Nonnull changedFlags) {
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    //There will be a typed LDChangedFlag entry in changedFlags for each changed flag. The block will only be called once regardless of how many flags changed.
///    [strongSelf showChangedFlags:changedFlags];
/// }];
///
/// \endcode\param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The LDFlagCollectionChangeHandler the SDK will execute 1 time when any of the observed feature flags change.
///
- (void)observeAllKeysWithOwner:(id _Nonnull)owner handler:(void (^ _Nonnull)(NSDictionary<NSString *, LDChangedFlag *> * _Nonnull))handler;
/// Sets a handler executed when a flag update leaves the flags unchanged from their previous values.
/// This handler can only ever be called when the LDClient is polling.
/// The SDK retains only weak references to owner, which allows the client app to freely destroy change owners without issues. Client apps should capture a strong self reference from a weak reference immediately inside the handler to avoid retain cycles causing a memory leak.
/// The SDK executes handlers on the main thread.
/// SeeAlso: <code>stopObserving(owner:)</code>
/// <h3>Usage</h3>
/// \code
/// __weak typeof(self) weakSelf = self;
/// [[LDClient sharedInstance] observeFlagsUnchangedWithOwner:self handler:^{
///    __strong typeof(weakSelf) strongSelf = weakSelf;
///    //do something after the flags were not updated. The block will be called once on the main thread if the client is polling and the poll did not change any flag values.
///    [self checkFeatureValues];
/// }];
///
/// \endcode\param owner The LDFlagChangeOwner which will execute the handler. The SDK retains a weak reference to the owner.
///
/// \param handler The LDFlagsUnchangedHandler the SDK will execute 1 time when a flag request completes with no flags changed.
///
- (void)observeFlagsUnchangedWithOwner:(id _Nonnull)owner handler:(void (^ _Nonnull)(void))handler;
/// Removes all observers for the given owner, including a flagsUnchangedObserver
/// The client app does not have to call this method. If the client app deinits a LDFlagChangeOwner, the SDK will automatically remove its handlers without ever calling them again.
/// \param owner The LDFlagChangeOwner owning the handlers to remove, whether a flag change handler or flags unchanged handler.
///
- (void)stopObservingForOwner:(id _Nonnull)owner;
/// Adds a custom event to the LDClient event store. A client app can set a tracking event to allow client customized data analysis. Once an app has called <code>track</code>, the app cannot remove the event from the event store.
/// LDClient periodically transmits events to LaunchDarkly based on the frequency set in LDConfig.eventFlushInterval. The LDClient must be started and online. Ths SDK stores events tracked while the LDClient is offline, but started.
/// Once the SDK’s event store is full, the SDK discards events until they can be reported to LaunchDarkly. Configure the size of the event store using <code>eventCapacity</code> on the <code>config</code>. See <code>LDConfig</code> (<code>ObjcLDConfig</code>) for details.
/// <h3>Usage</h3>
/// \code
/// [ldClientInstance trackWithKey:@"event-key" data:@{@"event-data-key":7}];
///
/// \endcode\param key The key for the event. The SDK does nothing with the key, which can be any string the client app sends
///
/// \param data The data for the event. The SDK does nothing with the data, which can be any valid JSON item the client app sends. (Optional)
///
/// \param error NSError object to hold the invalidJsonObject error if the data is not a valid JSON item. (Optional)
///
- (void)trackWithKey:(NSString * _Nonnull)key data:(LDValue * _Nullable)data;
/// See (track)[x-source-tag://track] for full documentation.
/// \param key The key for the event. The SDK does nothing with the key, which can be any string the client app sends
///
/// \param data The data for the event. The SDK does nothing with the data, which can be any valid JSON item the client app sends. (Optional)
///
/// \param metricValue A numeric value used by the LaunchDarkly experimentation feature in numeric custom metrics. Can be omitted if this event is used by only non-numeric metrics. This field will also be returned as part of the custom event for Data Export.
///
/// \param error NSError object to hold the invalidJsonObject error if the data is not a valid JSON item. (Optional)
///
- (void)trackWithKey:(NSString * _Nonnull)key data:(LDValue * _Nullable)data metricValue:(double)metricValue;
/// Tells the SDK to immediately send any currently queued events to LaunchDarkly.
/// There should not normally be a need to call this function. While online, the LDClient automatically reports events
/// on an interval defined by <code>LDConfig.eventFlushInterval</code>. Note that this function does not block until events are
/// sent, it only triggers a background task to send events immediately.
- (void)flush;
/// Tells the SDK to generate an alias event.
/// Associates two users for analytics purposes.
/// This can be helpful in the situation where a person is represented by multiple
/// LaunchDarkly users. This may happen, for example, when a person initially logs into
/// an application– the person might be represented by an anonymous user prior to logging
/// in and a different user after logging in, as denoted by a different user key.
/// \param context the user that will be aliased to
///
/// \param previousContext the user that will be bound to the new context
///
- (void)aliasWithContext:(LDUser * _Nonnull)context previousContext:(LDUser * _Nonnull)previousContext;
/// Starts the LDClient using the passed in <code>config</code> & <code>user</code>. Call this before requesting feature flag values. The LDClient will not go online until you call this method.
/// Starting the LDClient means setting the <code>config</code> & <code>user</code>, setting the client online if <code>config.startOnline</code> is true (the default setting), and starting event recording. The client app must start the LDClient before it will report feature flag values. If a client does not call <code>start</code>, no methods will work.
/// If the <code>start</code> call omits the <code>user</code>, the LDClient uses the default <code>user</code> if it was never set.
/// If the<code> start</code> call includes the optional <code>completion</code> closure, LDClient calls the <code>completion</code> closure when <code>setOnline(_: completion:)</code> embedded in the <code>init</code> method completes. This method listens for flag updates so the completion will only return once an update has occurred. The <code>start</code> call is subject to throttling delays, therefore the <code>completion</code> closure call may be delayed.
/// Subsequent calls to this method cause the LDClient to return. Normally there should only be one call to start. To change <code>user</code>, use <code>identify</code>.
/// \param configuration The LDConfig that contains the desired configuration. (Required)
///
/// \param user The LDUser set with the desired user. If omitted, LDClient sets a default user. (Optional)
///
/// \param completion Closure called when the embedded <code>setOnline</code> call completes. (Optional)
///
+ (void)startWithConfiguration:(LDConfig * _Nonnull)configuration user:(LDUser * _Nonnull)user completion:(void (^ _Nullable)(void))completion;
/// See <a href="x-source-tag://start">start</a> for more information on starting the SDK.
/// \param configuration The LDConfig that contains the desired configuration. (Required)
///
/// \param user The LDUser set with the desired user. If omitted, LDClient sets a default user.. (Optional)
///
/// \param startWaitSeconds A TimeInterval that determines when the completion will return if no flags have been returned from the network.
///
/// \param completion Closure called when the embedded <code>setOnline</code> call completes. Takes a Bool that indicates whether the completion timedout as a parameter. (Optional)
///
+ (void)startWithConfiguration:(LDConfig * _Nonnull)configuration user:(LDUser * _Nonnull)user startWaitSeconds:(NSTimeInterval)startWaitSeconds completion:(void (^ _Nullable)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// Use LDConfig to configure the LDClient. When initialized, a LDConfig contains the default values which can be changed as needed.
/// The client app can change the LDConfig by getting the <code>config</code> from LDClient (<code>ObjcLDClient</code>), adjusting the values, and setting it back into the LDClient (<code>ObjcLDClient</code>).
SWIFT_CLASS_NAMED("ObjcLDConfig")
@interface LDConfig : NSObject
/// The Mobile key from your <a href="app.launchdarkly.com">LaunchDarkly Account</a> settings (on the left at the bottom). If you have multiple projects be sure to choose the correct Mobile key.
@property (nonatomic, copy) NSString * _Nonnull mobileKey;
/// The url for making feature flag requests. Do not change unless instructed by LaunchDarkly.
@property (nonatomic, copy) NSURL * _Nonnull baseUrl;
/// The url for making event reports. Do not change unless instructed by LaunchDarkly.
@property (nonatomic, copy) NSURL * _Nonnull eventsUrl;
/// The url for connecting to the <em>clientstream</em>. Do not change unless instructed by LaunchDarkly.
@property (nonatomic, copy) NSURL * _Nonnull streamUrl;
/// The maximum number of analytics events the LDClient can store. When the LDClient event store reaches the eventCapacity, the SDK discards events until it successfully reports them to LaunchDarkly. (Default: 100)
@property (nonatomic) NSInteger eventCapacity;
/// The timeout interval for flag requests and event reports. (Default: 10 seconds)
@property (nonatomic) NSTimeInterval connectionTimeout;
/// The time interval between event reports (Default: 30 seconds)
@property (nonatomic) NSTimeInterval eventFlushInterval;
/// The interval between feature flag requests. Used only for polling mode. (Default: 5 minutes)
@property (nonatomic) NSTimeInterval flagPollingInterval;
/// The interval between feature flag requests while running in the background. Used only for polling mode. (Default: 60 minutes)
@property (nonatomic) NSTimeInterval backgroundFlagPollingInterval;
/// The minimum interval between feature flag requests. Used only for polling mode. (5 minutes)
@property (nonatomic, readonly) NSTimeInterval minFlagPollingInterval;
/// The minimum interval between feature flag requests while running in the background. Used only for polling mode. (15 minutes)
@property (nonatomic, readonly) NSTimeInterval minBackgroundFlagPollInterval;
/// Controls the method the SDK uses to keep feature flags updated. When set to .streaming, connects to <code>clientstream</code> which notifies the SDK of feature flag changes. When set to .polling, an efficient polling mechanism is used to periodically request feature flag values. Ignored for watchOS, which always uses .polling. See <code>LDStreamingMode</code> for more details. (Default: .streaming)
@property (nonatomic) BOOL streamingMode;
/// Enables feature flag updates when your app is in the background. Allowed on macOS only. (Default: NO)
@property (nonatomic) BOOL enableBackgroundUpdates;
/// Controls LDClient start behavior. When YES, calling start causes LDClient to go online. When NO, calling start causes LDClient to remain offline. If offline at start, set the client online to receive flag updates. (Default: YES)
@property (nonatomic) BOOL startOnline;
/// Treat all user attributes as private for event reporting for all users.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// When YES, ignores values in either LDConfig.privateUserAttributes or LDUser.privateAttributes. (Default: NO)
/// See Also: <code>privateUserAttributes</code> and <code>LDUser.privateAttributes</code> (<code>ObjcLDUser.privateAttributes</code>)
@property (nonatomic) BOOL allUserAttributesPrivate;
/// User attributes and top level custom dictionary keys to treat as private for event reporting for all users.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// To set private user attributes for a specific user, see <code>LDUser.privateAttributes</code> (<code>ObjcLDUser.privateAttributes</code>). (Default: <code>[]</code>)
/// See Also: <code>allUserAttributesPrivate</code> and <code>LDUser.privateAttributes</code> (<code>ObjcLDUser.privateAttributes</code>).
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull privateUserAttributes;
/// Directs the SDK to use REPORT for HTTP requests to connect to <code>clientstream</code> and make feature flag requests. When NO the SDK uses GET for these requests. Do not use unless advised by LaunchDarkly. (Default: NO)
@property (nonatomic) BOOL useReport;
/// Controls how the SDK reports the user in analytics event reports. When set to YES, event reports will contain the user attributes, except attributes marked as private. When set to NO, event reports will contain the user’s key only, reducing the size of event reports. (Default: NO)
@property (nonatomic) BOOL inlineUserInEvents;
/// Enables logging for debugging. (Default: NO)
@property (nonatomic) BOOL debugMode;
/// Enables requesting evaluation reasons for all flags. (Default: NO)
@property (nonatomic) BOOL evaluationReasons;
/// An Integer that tells UserEnvironmentFlagCache the maximum number of users to locally cache. Can be set to -1 for unlimited cached users. (Default: 5)
@property (nonatomic) NSInteger maxCachedUsers;
/// Set to true to opt out of sending diagnostic data. (Default: false)
/// Unless the diagnosticOptOut field is set to true, the client will send some diagnostics data to the LaunchDarkly servers in order to assist in the development of future SDK improvements. These diagnostics consist of an initial payload containing some details of the SDK in use, the SDK’s configuration, and the platform the SDK is being run on; as well as payloads sent periodically with information on irregular occurrences such as dropped events.
@property (nonatomic) BOOL diagnosticOptOut;
/// The interval between sending periodic diagnostic data. (Default: 15 minutes)
@property (nonatomic) NSTimeInterval diagnosticRecordingInterval;
/// For use by wrapper libraries to set an identifying name for the wrapper being used. This will be sent in the “X-LaunchDarkly-Wrapper” header on requests to the LaunchDarkly servers to allow recording metrics on the usage of these wrapper libraries.
@property (nonatomic, copy) NSString * _Nullable wrapperName;
/// For use by wrapper libraries to report the version of the library in use. If the <code>wrapperName</code> has not been set this field will be ignored. Otherwise the verison strill will be included with the <code>wrapperName</code> in the “X-LaunchDarkly-Wrapper” header on requests to the LaunchDarkly servers.
@property (nonatomic, copy) NSString * _Nullable wrapperVersion;
/// Returns a Dictionary of identifying names to unique mobile keys to access secondary environments.
///
/// returns:
/// A Dictionary of String to String.
- (NSDictionary<NSString *, NSString *> * _Nonnull)getSecondaryMobileKeys SWIFT_WARN_UNUSED_RESULT;
/// Sets a Dictionary of identifying names to unique mobile keys to access secondary environments in the LDConfig. Throws if you try to add duplicate keys or put the primary key or name in secondaryMobileKeys.
/// \param keys A Dictionary of String to String.
///
- (BOOL)setSecondaryMobileKeys:(NSDictionary<NSString *, NSString *> * _Nonnull)keys error:(NSError * _Nullable * _Nullable)error;
/// LDConfig constructor. Configurable values are all set to their default values. The client app can modify these values as desired. Note that client app developers may prefer to get the LDConfig from <code>LDClient.config</code> (<code>ObjcLDClient.config</code>) in order to retain previously set values.
- (nonnull instancetype)initWithMobileKey:(NSString * _Nonnull)mobileKey OBJC_DESIGNATED_INITIALIZER;
/// Compares the settable properties in 2 LDConfig structs
- (BOOL)isEqualWithObject:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Structure that contains the evaluation result and additional information when evaluating a flag as a double.
SWIFT_CLASS_NAMED("ObjcLDDoubleEvaluationDetail")
@interface LDDoubleEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly) double value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Structure that contains the evaluation result and additional information when evaluating a flag as an integer.
SWIFT_CLASS_NAMED("ObjcLDIntegerEvaluationDetail")
@interface LDIntegerEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly) NSInteger value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Structure that contains the evaluation result and additional information when evaluating a flag as a JSON value.
SWIFT_CLASS_NAMED("ObjcLDJSONEvaluationDetail")
@interface LDJSONEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly, strong) LDValue * _Nonnull value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Structure that contains the evaluation result and additional information when evaluating a flag as a string.
SWIFT_CLASS_NAMED("ObjcLDStringEvaluationDetail")
@interface LDStringEvaluationDetail : NSObject
/// The value of the flag for the current user.
@property (nonatomic, readonly, copy) NSString * _Nullable value;
/// The index of the returned value within the flag’s list of variations, or <code>-1</code> if the default was returned.
@property (nonatomic, readonly) NSInteger variationIndex;
/// A structure representing the main factor that influenced the resultant flag evaluation value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, LDValue *> * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// LDUser allows clients to collect information about users in order to refine the feature flag values sent to the SDK. For example, the client app may launch with the SDK defined anonymous user. As the user works with the client app, information may be collected as needed and sent to LaunchDarkly. The client app controls the information collected, which LaunchDarkly does not use except as the client directs to refine feature flags. Client apps should follow <a href="apple.com/legal/privacy">Apple’s Privacy Policy</a> when collecting user information.
/// The SDK caches last known feature flags for use on app startup to provide continuity with the last app run. Provided the LDClient is online and can establish a connection with LaunchDarkly servers, cached information will only be used a very short time. Once the latest feature flags arrive at the SDK, the SDK no longer uses cached feature flags. The SDK retains feature flags on the last 5 client defined users. The SDK will retain feature flags until they are overwritten by a different user’s feature flags, or until the user removes the app from the device.
/// The SDK does not cache user information collected, except for the user key. The user key is used to identify the cached feature flags for that user. Client app developers should use caution not to use sensitive user information as the user-key.
SWIFT_CLASS_NAMED("ObjcLDUser")
@interface LDUser : NSObject
/// LDUser secondary attribute used to make <code>secondary</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeSecondary;)
+ (NSString * _Nonnull)attributeSecondary SWIFT_WARN_UNUSED_RESULT;
/// LDUser name attribute used to make <code>name</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeName;)
+ (NSString * _Nonnull)attributeName SWIFT_WARN_UNUSED_RESULT;
/// LDUser firstName attribute used to make <code>firstName</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeFirstName;)
+ (NSString * _Nonnull)attributeFirstName SWIFT_WARN_UNUSED_RESULT;
/// LDUser lastName attribute used to make <code>lastName</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeLastName;)
+ (NSString * _Nonnull)attributeLastName SWIFT_WARN_UNUSED_RESULT;
/// LDUser country attribute used to make <code>country</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeCountry;)
+ (NSString * _Nonnull)attributeCountry SWIFT_WARN_UNUSED_RESULT;
/// LDUser ipAddress attribute used to make <code>ipAddress</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeIPAddress;)
+ (NSString * _Nonnull)attributeIPAddress SWIFT_WARN_UNUSED_RESULT;
/// LDUser email attribute used to make <code>email</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeEmail;)
+ (NSString * _Nonnull)attributeEmail SWIFT_WARN_UNUSED_RESULT;
/// LDUser avatar attribute used to make <code>avatar</code> private
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull attributeAvatar;)
+ (NSString * _Nonnull)attributeAvatar SWIFT_WARN_UNUSED_RESULT;
/// Client app defined string that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user. The key cannot be made private.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// The secondary key for the user. See the <a href="https://docs.launchdarkly.com/home/flags/targeting-users#percentage-rollouts">documentation</a> for more information on it’s use for percentage rollout bucketing.
@property (nonatomic, copy) NSString * _Nullable secondary;
/// Client app defined name for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable name;
/// Client app defined first name for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable firstName;
/// Client app defined last name for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable lastName;
/// Client app defined country for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable country;
/// Client app defined ipAddress for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable ipAddress;
/// Client app defined email address for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable email;
/// Client app defined avatar for the user. (Default: nil)
@property (nonatomic, copy) NSString * _Nullable avatar;
/// Client app defined dictionary for the user. The client app may declare top level dictionary items as private. See <code>privateAttributes</code> for details.
@property (nonatomic, copy) NSDictionary<NSString *, LDValue *> * _Nonnull custom;
/// Client app defined isAnonymous for the user. If the client app does not define isAnonymous, the SDK will use the <code>key</code> to set this attribute. isAnonymous cannot be made private. (Default: YES)
@property (nonatomic) BOOL isAnonymous;
/// Client app defined privateAttributes for the user.
/// The SDK will not include private attribute values in analytics events, but private attribute names will be sent.
/// This attribute is ignored if <code>ObjcLDConfig.allUserAttributesPrivate</code> is YES. Combined with <code>ObjcLDConfig.privateUserAttributes</code>. The SDK considers attributes appearing in either list as private. Client apps may define most built-in attributes and all top level <code>custom</code> dictionary keys here. (Default: <code>[]</code>])
/// See Also: <code>ObjcLDConfig.allUserAttributesPrivate</code> and <code>ObjcLDConfig.privateUserAttributes</code>.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull privateAttributes;
/// Initializer to create a LDUser. Client configurable attributes are set to their default value. The SDK will automatically set <code>key</code>, <code>device</code>, <code>operatingSystem</code>, and <code>isAnonymous</code> attributes. The SDK embeds <code>device</code> and <code>operatingSystem</code> into the <code>custom</code> dictionary for transmission to LaunchDarkly.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer to create a LDUser with a specific key. Other client configurable attributes are set to their default value. The SDK will automatically set <code>key</code>, <code>device</code>, <code>operatingSystem</code>, and <code>isAnonymous</code> attributes. The SDK embeds <code>device</code> and <code>operatingSystem</code> into the <code>custom</code> dictionary for transmission to LaunchDarkly.
/// \param key String that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user.
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key OBJC_DESIGNATED_INITIALIZER;
/// Compares users by comparing their user keys only, to allow the client app to collect user information over time
- (BOOL)isEqualWithObject:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;
enum LDValueType : NSInteger;

/// Bridged <code>LDValue</code> type for Objective-C.
/// Can create instances from Objective-C with the provided <code>of</code> static functions, for example <code>[LDValue ofBool:YES]</code>.
SWIFT_CLASS_NAMED("ObjcLDValue")
@interface LDValue : NSObject
/// Create a new <code>LDValue</code> that represents a JSON null.
+ (LDValue * _Nonnull)ofNull SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> from a boolean value.
+ (LDValue * _Nonnull)ofBool:(BOOL)bool_ SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> from a numeric value.
+ (LDValue * _Nonnull)ofNumber:(NSNumber * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> from a string value.
+ (LDValue * _Nonnull)ofString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> from an array of values.
+ (LDValue * _Nonnull)ofArray:(NSArray<LDValue *> * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
/// Create a new <code>LDValue</code> object from dictionary of values.
+ (LDValue * _Nonnull)ofDict:(NSDictionary<NSString *, LDValue *> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
/// Get the type of the value.
- (enum LDValueType)getType SWIFT_WARN_UNUSED_RESULT;
/// Get the value as a <code>Bool</code>.
///
/// returns:
/// The contained boolean value or <code>NO</code> if the value is not a boolean.
- (BOOL)boolValue SWIFT_WARN_UNUSED_RESULT;
/// Get the value as a <code>Double</code>.
///
/// returns:
/// The contained double value or <code>0.0</code> if the value is not a number.
- (double)doubleValue SWIFT_WARN_UNUSED_RESULT;
/// Get the value as a <code>String</code>.
///
/// returns:
/// The contained string value or the empty string if the value is not a string.
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
/// Get the value as an array.
///
/// returns:
/// An array of the contained values, or the empty array if the value is not an array.
- (NSArray<LDValue *> * _Nonnull)arrayValue SWIFT_WARN_UNUSED_RESULT;
/// Get the value as a dictionary representing the JSON object
///
/// returns:
/// A dictionary representing the JSON object, or the empty dictionary if the value is not a dictionary.
- (NSDictionary<NSString *, LDValue *> * _Nonnull)dictValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Used to represent the type of an <code>LDValue</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, LDValueType, "ObjcLDValueType", closed) {
/// The value returned by <code>LDValue.getType()</code> when the represented value is a null.
  LDValueTypeNull = 0,
/// The value returned by <code>LDValue.getType()</code> when the represented value is a boolean.
  LDValueTypeBool = 1,
/// The value returned by <code>LDValue.getType()</code> when the represented value is a number.
  LDValueTypeNumber = 2,
/// The value returned by <code>LDValue.getType()</code> when the represented value is a string.
  LDValueTypeString = 3,
/// The value returned by <code>LDValue.getType()</code> when the represented value is an array.
  LDValueTypeArray = 4,
/// The value returned by <code>LDValue.getType()</code> when the represented value is an object.
  LDValueTypeObject = 5,
};





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
